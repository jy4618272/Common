using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Micajah.Common.Bll;
using Micajah.Common.Bll.Providers;
using Micajah.Common.Dal;
using Micajah.Common.Properties;
using Micajah.Common.WebControls.SetupControls;

namespace Micajah.Common.WebControls.AdminControls
{
    public class RuleParametersControl : UserControl
    {
        #region Members

        protected MagicForm FormRoleView;
        protected CommonGridView GridViewParameters;
        protected HtmlTable TableEditParameter;
        protected Literal RuleParameterCaption;
        protected DropDownList DropDownListEntityTypes;
        protected DropDownList DropDownListEntityFields;
        protected Label LabelFieldType;
        protected Label LabelFieldsTypeFullName;
        protected DropDownList DropDownListTerm;
        protected TextBox TextBoxEntityValue;
        protected DropDownList ComboBoxEntityValue;
        protected DatePicker DatePickerEntityValue;
        protected CheckBox CheckBoxEntityValue;
        protected LinkButton LinkButtonUpdateParameter;
        protected LinkButton LinkButtonCancelParameter;
        protected Literal literal1, literal2, literal3, literal4, literal5;
        protected Label LabelRuleEngineId;
        protected EntityTreeView EntityTreeViewValue;

        private string m_FieldName;
        private object m_EntityValue;
        private string m_Term;

        private enum ControlValue
        {
            TextBox,
            DatePicker,
            ComboBox,
            CheckBox,
            TreeView
        }

        #endregion

        #region Public Properties

        public Guid RuleId
        {
            get
            {
                Guid id = Guid.Empty;
                if (!string.IsNullOrEmpty(Request.QueryString["ruleid"]))
                {
                    try { id = new Guid(Request.QueryString["ruleid"]); }
                    finally { }
                }
                return id;
            }
        }

        public Guid RuleParameterId
        {
            get
            {
                Guid id = Guid.Empty;
                if (GridViewParameters.SelectedIndex > -1)
                {
                    try { id = (Guid)GridViewParameters.SelectedValue; }
                    finally { }
                }
                return id;
            }

        }

        public Guid EntityTypeId
        {
            get
            {
                Guid id = Guid.Empty;
                if (DropDownListEntityTypes.SelectedIndex > -1)
                {
                    try { id = new Guid(DropDownListEntityTypes.SelectedValue); }
                    finally { }
                }
                return id;
            }
        }

        #endregion

        #region Overriden Methods

        protected override void OnLoad(EventArgs e)
        {
            if (!IsPostBack)
            {
                FormRoleView.ObjectName = Resources.RulesControl_EditForm_ObjectName;
                FormRoleView.Fields[0].HeaderText = Resources.RulesControl_EditForm_NameField_HeaderText;
                FormRoleView.Fields[1].HeaderText = Resources.RulesControl_EditForm_DisplayNameField_HeaderText;
                FormRoleView.Fields[2].HeaderText = Resources.RulesControl_List_UsedQtyColumn_HeaderText;
                FormRoleView.Fields[3].HeaderText = Resources.RulesControl_List_LastUsedUserColumn_HeaderText;
                FormRoleView.Fields[4].HeaderText = Resources.RulesControl_List_LastUsedDateColumn_HeaderText;
                FormRoleView.Fields[5].HeaderText = Resources.RulesControl_List_CreatedByColumn_HeaderText;
                FormRoleView.Fields[6].HeaderText = Resources.RulesControl_List_CreatedDateColumn_HeaderText;
                FormRoleView.Fields[7].HeaderText = Resources.RulesControl_List_ActiveColumn_HeaderText;

                GridViewParameters.Caption = Resources.RuleParametersControl_List_Caption;
                literal1.Text = GridViewParameters.Columns[0].HeaderText = Resources.RuleParametersControl_List_EntityNodeTypeIdColumn_HeaderText;
                literal2.Text = GridViewParameters.Columns[1].HeaderText = Resources.RuleParametersControl_List_FieldNameColumn_HeaderText;
                literal3.Text = GridViewParameters.Columns[2].HeaderText = Resources.RuleParametersControl_List_TypeNameColumn_HeaderText;
                literal4.Text = GridViewParameters.Columns[3].HeaderText = Resources.RuleParametersControl_List_TermColumn_HeaderText;
                literal5.Text = GridViewParameters.Columns[4].HeaderText = Resources.RuleParametersControl_List_ValueColumn_HeaderText;
                LinkButtonUpdateParameter.Text = Resources.AutoGeneratedButtonsField_SaveButton_Text;
                LinkButtonCancelParameter.Text = Resources.AutoGeneratedButtonsField_CancelButton_Text;

                Rule rul = Rule.Create(this.RuleId);
                if (rul != null)
                    LabelRuleEngineId.Text = rul.RulesEngineId.ToString();
            }
        }

        protected override void OnInit(EventArgs e)
        {
            ScriptManager sm = ScriptManager.GetCurrent(this.Page);
            if (sm != null) sm.EnablePartialRendering = true;

            FormRoleView.AutoGenerateRows = false;
            FormRoleView.AutoGenerateInsertButton = false;
            FormRoleView.AutoGenerateEditButton = false;
            FormRoleView.ShowCloseButton = CloseButtonVisibilityMode.None;
            FormRoleView.DefaultMode = DetailsViewMode.ReadOnly;

            BaseControl.Initialize(GridViewParameters);

            base.OnInit(e);
        }

        #endregion

        #region Protected Methods

        protected void GridViewParameters_Action(object sender, CommonGridViewActionEventArgs e)
        {
            if (e == null) return;

            switch (e.Action)
            {
                case CommandActions.Add:
                    GridViewParameters.Visible = false;
                    TableEditParameter.Visible = true;
                    RuleParameterCaption.Text = MagicForm.GetCaption(DetailsViewMode.Insert, Resources.RuleParametersControl_RuleParameterCaption_Text);
                    m_EntityValue = null;
                    m_FieldName = null;
                    DropDownListEntityTypes.DataBind();
                    if (DropDownListEntityTypes.Items.Count > 0)
                        DropDownListEntityTypes_SelectedIndexChanged(DropDownListEntityTypes, EventArgs.Empty);
                    break;
                case CommandActions.Edit:
                    GridViewParameters.SelectedIndex = e.RowIndex;
                    GridViewParameters.Visible = false;
                    TableEditParameter.Visible = true;
                    RuleParameterCaption.Text = MagicForm.GetCaption(DetailsViewMode.Edit, Resources.RuleParametersControl_RuleParameterCaption_Text);
                    OrganizationDataSet.RuleParametersRow row = RuleEngineProvider.GetRuleParameterRow(this.RuleParameterId);
                    if (row != null)
                    {
                        m_FieldName = row.FieldName;
                        m_EntityValue = row.Value;
                        m_Term = row.Term;
                        DropDownListEntityTypes.DataBind();
                        DropDownListEntityTypes.SelectedValue = row.EntityNodeTypeId.ToString();
                        DropDownListEntityTypes_SelectedIndexChanged(DropDownListEntityTypes, EventArgs.Empty);
                    }
                    break;
                case CommandActions.Delete:
                    GridViewParameters.DataBind();
                    break;
                default:
                    break;
            }
        }

        protected void DropDownListEntityTypes_SelectedIndexChanged(object sender, EventArgs e)
        {
            DropDownListEntityFields.DataBind();
            if (DropDownListEntityFields.Items.Count > 0)
                DropDownListEntityFields_SelectedIndexChanged(DropDownListEntityFields, EventArgs.Empty);
        }

        protected void DropDownListEntityFields_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.EntityTypeId == Guid.Empty) return;
            EntityFieldCollection fields = EntityNodeProvider.GetEntityFields(this.EntityTypeId);
            if (fields == null) return;
            if (!string.IsNullOrEmpty(m_FieldName)) DropDownListEntityFields.SelectedValue = m_FieldName;
            EntityField field = fields[DropDownListEntityFields.SelectedValue];
            if (field == null) return;
            LabelFieldType.Text = field.DataType.Name;
            LabelFieldsTypeFullName.Text = field.DataType.FullName;
            DropDownListTerm.Items.Clear();
            DropDownListTerm.Items.Add(new ListItem("=="));
            DropDownListTerm.Items.Add(new ListItem("!="));

            ControlValue FieldTypeConrol = ControlValue.TextBox;
            List<ListItem> lists = new List<ListItem>();
            lists.Add(new ListItem(">"));
            lists.Add(new ListItem(">="));
            lists.Add(new ListItem("<"));
            lists.Add(new ListItem("<="));

            if (field.ListValues.Count > 0)
            {
                LabelFieldType.Text = Resources.RuleParametersControl_LookupText;
                FieldTypeConrol = ControlValue.ComboBox;
                ComboBoxEntityValue.DataSource = field.ListValuesOld;
                ComboBoxEntityValue.DataBind();
                if (m_EntityValue != null)
                    ComboBoxEntityValue.SelectedValue = Convert.ToString(m_EntityValue, CultureInfo.CurrentCulture);
            }
            else if (field.DataType == typeof(short))
            {
                FieldTypeConrol = ControlValue.TextBox;
                DropDownListTerm.Items.AddRange(lists.ToArray());
                if (field.MaxLength > 0) TextBoxEntityValue.MaxLength = 0;
                TextBoxEntityValue.ValidationType = CustomValidationDataType.Integer;
                TextBoxEntityValue.MaximumValue = (field.MaxValue != null) ? ((short)field.MaxValue).ToString(CultureInfo.CurrentCulture) : short.MaxValue.ToString(CultureInfo.CurrentCulture);
                TextBoxEntityValue.MinimumValue = (field.MinValue != null) ? ((short)field.MinValue).ToString(CultureInfo.CurrentCulture) : short.MinValue.ToString(CultureInfo.CurrentCulture);
                TextBoxEntityValue.Text = (field.DefaultValue != null) ? Convert.ToString(field.DefaultValue, CultureInfo.CurrentCulture) : "0";
            }
            else if (field.DataType == typeof(int))
            {
                FieldTypeConrol = ControlValue.TextBox;
                DropDownListTerm.Items.AddRange(lists.ToArray());
                if (field.MaxLength > 0) TextBoxEntityValue.MaxLength = 0;
                TextBoxEntityValue.ValidationType = CustomValidationDataType.Integer;
                TextBoxEntityValue.MaximumValue = (field.MaxValue != null) ? ((int)field.MaxValue).ToString(CultureInfo.CurrentCulture) : int.MaxValue.ToString(CultureInfo.CurrentCulture);
                TextBoxEntityValue.MinimumValue = (field.MinValue != null) ? ((int)field.MinValue).ToString(CultureInfo.CurrentCulture) : int.MinValue.ToString(CultureInfo.CurrentCulture);
                if (m_EntityValue != null) TextBoxEntityValue.Text = Convert.ToString(m_EntityValue, CultureInfo.CurrentCulture);
                else TextBoxEntityValue.Text = (field.DefaultValue != null) ? Convert.ToString(field.DefaultValue, CultureInfo.CurrentCulture) : "0";
            }
            else if (field.DataType == typeof(long))
            {
                FieldTypeConrol = ControlValue.TextBox;
                DropDownListTerm.Items.AddRange(lists.ToArray());
                if (field.MaxLength > 0) TextBoxEntityValue.MaxLength = 0;
                TextBoxEntityValue.ValidationType = CustomValidationDataType.Integer;
                TextBoxEntityValue.MaximumValue = (field.MaxValue != null) ? ((long)field.MaxValue).ToString(CultureInfo.CurrentCulture) : long.MaxValue.ToString(CultureInfo.CurrentCulture);
                TextBoxEntityValue.MinimumValue = (field.MinValue != null) ? ((long)field.MinValue).ToString(CultureInfo.CurrentCulture) : long.MinValue.ToString(CultureInfo.CurrentCulture);
                if (m_EntityValue != null) TextBoxEntityValue.Text = Convert.ToString(m_EntityValue, CultureInfo.CurrentCulture);
                else TextBoxEntityValue.Text = (field.DefaultValue != null) ? Convert.ToString(field.DefaultValue, CultureInfo.CurrentCulture) : "0";
            }
            else if (field.DataType == typeof(decimal))
            {
                FieldTypeConrol = ControlValue.TextBox;
                DropDownListTerm.Items.AddRange(lists.ToArray());
                if (field.MaxLength > 0) TextBoxEntityValue.MaxLength = 0;
                TextBoxEntityValue.ValidationType = CustomValidationDataType.Double;
                TextBoxEntityValue.MaximumValue = (field.MaxValue != null) ? ((decimal)field.MaxValue).ToString(CultureInfo.CurrentCulture) : decimal.MaxValue.ToString(CultureInfo.CurrentCulture);
                TextBoxEntityValue.MinimumValue = (field.MinValue != null) ? ((decimal)field.MinValue).ToString(CultureInfo.CurrentCulture) : decimal.MinValue.ToString(CultureInfo.CurrentCulture);
                if (m_EntityValue != null) TextBoxEntityValue.Text = Convert.ToString(m_EntityValue, CultureInfo.CurrentCulture);
                else TextBoxEntityValue.Text = (field.DefaultValue != null) ? Convert.ToString(field.DefaultValue, CultureInfo.CurrentCulture) : decimal.Zero.ToString(CultureInfo.CurrentCulture);
            }
            else if (field.DataType == typeof(double))
            {
                FieldTypeConrol = ControlValue.TextBox;
                DropDownListTerm.Items.AddRange(lists.ToArray());
                if (field.MaxLength > 0) TextBoxEntityValue.MaxLength = 0;
                TextBoxEntityValue.ValidationType = CustomValidationDataType.Double;
                TextBoxEntityValue.MaximumValue = (field.MaxValue != null) ? ((double)field.MaxValue).ToString(CultureInfo.CurrentCulture) : double.MaxValue.ToString(CultureInfo.CurrentCulture);
                TextBoxEntityValue.MinimumValue = (field.MinValue != null) ? ((double)field.MinValue).ToString(CultureInfo.CurrentCulture) : double.MinValue.ToString(CultureInfo.CurrentCulture);
                if (m_EntityValue != null) TextBoxEntityValue.Text = Convert.ToString(m_EntityValue, CultureInfo.CurrentCulture);
                else TextBoxEntityValue.Text = (field.DefaultValue != null) ? Convert.ToString(field.DefaultValue, CultureInfo.CurrentCulture) : decimal.Zero.ToString(CultureInfo.CurrentCulture);

            }
            else if (field.DataType == typeof(float))
            {
                FieldTypeConrol = ControlValue.TextBox;
                DropDownListTerm.Items.AddRange(lists.ToArray());
                if (field.MaxLength > 0) TextBoxEntityValue.MaxLength = 0;
                TextBoxEntityValue.ValidationType = CustomValidationDataType.Double;
                TextBoxEntityValue.MaximumValue = (field.MaxValue != null) ? ((float)field.MaxValue).ToString(CultureInfo.CurrentCulture) : float.MaxValue.ToString(CultureInfo.CurrentCulture);
                TextBoxEntityValue.MinimumValue = (field.MinValue != null) ? ((float)field.MinValue).ToString(CultureInfo.CurrentCulture) : float.MinValue.ToString(CultureInfo.CurrentCulture);
                if (m_EntityValue != null) TextBoxEntityValue.Text = Convert.ToString(m_EntityValue, CultureInfo.CurrentCulture);
                else TextBoxEntityValue.Text = (field.DefaultValue != null) ? Convert.ToString(field.DefaultValue, CultureInfo.CurrentCulture) : decimal.Zero.ToString(CultureInfo.CurrentCulture);
            }
            else if (field.DataType == typeof(DateTime))
            {
                DropDownListTerm.Items.AddRange(lists.ToArray());
                FieldTypeConrol = ControlValue.DatePicker;
                DatePickerEntityValue.Type = DatePickerType.DateTimePicker;

                if (field.MaxValue != null) DatePickerEntityValue.MaxDate = (DateTime)field.MaxValue;
                if (field.MinValue != null) DatePickerEntityValue.MinDate = (DateTime)field.MinValue;
                if (m_EntityValue != null) DatePickerEntityValue.SelectedDate = Convert.ToDateTime(m_EntityValue, CultureInfo.CurrentCulture);
                else if (field.DefaultValue != null) DatePickerEntityValue.SelectedDate = (DateTime)field.DefaultValue;
            }
            else if (field.DataType == typeof(bool))
            {
                FieldTypeConrol = ControlValue.CheckBox;
                if (m_EntityValue != null) CheckBoxEntityValue.Checked = Convert.ToBoolean(m_EntityValue, CultureInfo.CurrentCulture);
                else CheckBoxEntityValue.Checked = (field.DefaultValue != null) ? Convert.ToBoolean(field.DefaultValue, CultureInfo.CurrentCulture) : false;
            }
            else if (field.DataType == typeof(Guid))
            {
                FieldTypeConrol = ControlValue.TextBox;
                TextBoxEntityValue.MaxLength = 25;
                TextBoxEntityValue.ValidationType = CustomValidationDataType.RegularExpression;
                TextBoxEntityValue.ValidationExpression = @"[({]?(0x)?[0-9a-fA-F]{8}([-,]?(0x)?[0-9a-fA-F]{4}){2}((-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})|(,\{0x[0-9a-fA-F]{2}(,0x[0-9a-fA-F]{2}){7}\}))[)}]?";
                if (m_EntityValue != null) TextBoxEntityValue.Text = Convert.ToString(m_EntityValue, CultureInfo.CurrentCulture);
                else if (field.DefaultValue != null) TextBoxEntityValue.Text = ((Guid)field.DefaultValue).ToString();
            }
            else if (field.DataType == typeof(Entity))
            {
                FieldTypeConrol = ControlValue.TreeView;
                EntityTreeViewValue.EntityId = field.Id;
                if (m_EntityValue != null)
                    EntityTreeViewValue.EntityNodeId = (Guid)m_EntityValue;
                EntityTreeViewValue.DataBind();
            }
            else
            {
                TextBoxEntityValue.ValidationType = CustomValidationDataType.String;
                if (field.MaxLength > 0) TextBoxEntityValue.MaxLength = 0;
                if (m_EntityValue != null) TextBoxEntityValue.Text = Convert.ToString(m_EntityValue, CultureInfo.CurrentCulture);
                else if (field.DefaultValue != null) TextBoxEntityValue.Text = HttpUtility.HtmlEncode(Convert.ToString(field.DefaultValue, CultureInfo.CurrentCulture));
            }
            if (!string.IsNullOrEmpty(m_Term))
            {
                DropDownListTerm.SelectedValue = m_Term;
            }
            switch (FieldTypeConrol)
            {
                case ControlValue.TextBox:
                    TextBoxEntityValue.Visible = true;
                    ComboBoxEntityValue.Visible = false;
                    DatePickerEntityValue.Visible = false;
                    CheckBoxEntityValue.Visible = false;
                    EntityTreeViewValue.Visible = false;
                    break;
                case ControlValue.CheckBox:
                    TextBoxEntityValue.Visible = false;
                    ComboBoxEntityValue.Visible = false;
                    DatePickerEntityValue.Visible = false;
                    CheckBoxEntityValue.Visible = true;
                    EntityTreeViewValue.Visible = false;
                    break;
                case ControlValue.ComboBox:
                    TextBoxEntityValue.Visible = false;
                    ComboBoxEntityValue.Visible = true;
                    DatePickerEntityValue.Visible = false;
                    CheckBoxEntityValue.Visible = false;
                    EntityTreeViewValue.Visible = false;
                    break;
                case ControlValue.DatePicker:
                    TextBoxEntityValue.Visible = false;
                    ComboBoxEntityValue.Visible = false;
                    DatePickerEntityValue.Visible = true;
                    CheckBoxEntityValue.Visible = false;
                    EntityTreeViewValue.Visible = false;
                    break;
                case ControlValue.TreeView:
                    TextBoxEntityValue.Visible = false;
                    ComboBoxEntityValue.Visible = false;
                    DatePickerEntityValue.Visible = false;
                    CheckBoxEntityValue.Visible = false;
                    EntityTreeViewValue.Visible = true;
                    break;
            }

        }

        protected void LinkButtonCancelParameter_Click(object sender, EventArgs e)
        {
            GridViewParameters.Visible = true;
            TableEditParameter.Visible = false;
            GridViewParameters.DataBind();
            GridViewParameters.SelectedIndex = -1;
        }

        protected void FormRuleView_DataBound(object sender, EventArgs e)
        {
            OrganizationDataSet.RuleRow row = FormRoleView.DataItem as OrganizationDataSet.RuleRow;
            Label LabelUserName = FormRoleView.FindControl("LabelUserName") as Label;
            Label LabelUserDate = FormRoleView.FindControl("LabelUserDate") as Label;
            if (row != null && LabelUserName != null && LabelUserDate != null)
            {
                if (!row.IsLastUsedUserNull())
                {
                    LabelUserName.Text = RuleEngineProvider.GetDisplayUserName(row.LastUsedUser, row.OrganizationId);
                }
                if (!row.IsLastUsedDateNull())
                {
                    LabelUserDate.Text = row.LastUsedDate.ToString("g", CultureInfo.CurrentCulture);
                }
            }
        }

        protected void LinkButtonUpdateParameter_Click(object sender, EventArgs e)
        {
            object entityValue = null;
            Type entityType = Type.GetType(LabelFieldsTypeFullName.Text);

            if (ComboBoxEntityValue.Visible)
                entityValue = Support.ConvertStringToType(ComboBoxEntityValue.SelectedValue, entityType);
            else if (DatePickerEntityValue.Visible)
                entityValue = DatePickerEntityValue.SelectedDate;
            else if (CheckBoxEntityValue.Visible)
                entityValue = CheckBoxEntityValue.Checked;
            else if (EntityTreeViewValue.Visible)
                entityValue = Support.ConvertStringToType(EntityTreeViewValue.SelectedValue, typeof(Guid));
            else
                entityValue = Support.ConvertStringToType(TextBoxEntityValue.Text, entityType);
            if (entityValue == null) return;
            if (!this.RuleId.Equals(Guid.Empty))
            {
                if (this.RuleParameterId.Equals(Guid.Empty))
                {
                    RuleEngineProvider.InsertRuleParameter(Guid.NewGuid(),
                        this.RuleId,
                        this.EntityTypeId,
                        true,
                        true,
                        DropDownListEntityFields.SelectedValue,
                        LabelFieldsTypeFullName.Text,
                        LabelFieldType.Text,
                        DropDownListTerm.SelectedValue,
                        entityValue);
                }
                else
                {
                    RuleEngineProvider.UpdateRuleParameter(this.RuleParameterId,
                        this.RuleId,
                        this.EntityTypeId,
                        true,
                        true,
                        DropDownListEntityFields.SelectedValue,
                        LabelFieldsTypeFullName.Text,
                        LabelFieldType.Text,
                        DropDownListTerm.SelectedValue,
                        entityValue);
                }

                GridViewParameters.Visible = true;
                TableEditParameter.Visible = false;
                GridViewParameters.DataBind();
                GridViewParameters.SelectedIndex = -1;
            }
        }

        #endregion
    }
}
