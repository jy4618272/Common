using Micajah.Common.Bll.Providers;
using Micajah.Common.Dal;
using Micajah.Common.Properties;
using Micajah.Common.Security;
using Micajah.Common.WebControls.SetupControls;
using System;
using System.Data;
using System.Web.UI.WebControls;

namespace Micajah.Common.WebControls.AdminControls
{
    /// <summary>
    /// The control to manage measure units.
    /// </summary>
    public class MeasureUnitsControl : BaseControl
    {
        #region Members

        protected CommonGridView ConversionList;
        protected CommonGridView GlobalList;
        protected LinkButton LinkButtonBack;

        #endregion

        #region Private Methods

        private void ShowLinkButtonBack()
        {
            LinkButtonBack.Visible = true;
            MagicForm.RegisterStyleSheet(this.Page);
        }

        #endregion

        #region Overriden Methods

        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            Initialize(ConversionList);
            Initialize(GlobalList);
            GlobalList.RowCommand += new GridViewCommandEventHandler(GlobalList_RowCommand);
            GlobalList.AutoGenerateEditButton = false;
            GlobalList.AutoGenerateDeleteButton = false;
            GlobalList.ShowAddLink = false;
            GlobalList.AllowPaging = true;
            GlobalList.Visible = false;
            List.ShowAddLink = false;
            LinkButtonBack.Visible = false;
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            Micajah.Common.Pages.MasterPage.InitializeAdminPage(this.Page);
        }

        protected override void EditFormInitialize()
        {
            base.EditFormInitialize();
            ConversionList.Action += new EventHandler<CommonGridViewActionEventArgs>(ConversionList_Action);
            EditForm.HeaderStyle.Wrap = false;
        }

        protected override void ListInitialize()
        {
            base.ListInitialize();
            List.RowCommand += new GridViewCommandEventHandler(List_RowCommand);
            List.Action += new EventHandler<CommonGridViewActionEventArgs>(List_Action);
        }

        protected override void LoadResources()
        {
            base.LoadResources();

            string className = this.GetType().BaseType.Name;
            LoadResources(GlobalList, className);

            ButtonField field = (List.Columns[0] as ButtonField);
            if (field != null) field.Text = Resources.MeasureUnitsControl_List_ConversionColumn_Text;
            ButtonField gfield = (GlobalList.Columns[0] as ButtonField);
            if (gfield != null) gfield.Text = Resources.MeasureUnitsControl_GlobalList_AddUnitColumn_Text;

            ConversionList.Caption = Resources.MeasureUnitsControl_ConversionList_Caption;
            ConversionList.Columns[0].HeaderText = Resources.MeasureUnitsControl_ConversionList_SourceColumn_HeaderText;
            ConversionList.Columns[1].HeaderText = Resources.MeasureUnitsControl_ConversionList_TargetColumn_HeaderText;

            LinkButtonBack.Text = Resources.AutoGeneratedButtonsField_CancelButton_Text;
        }

        #endregion

        #region Protected Methods

        protected void AddFromBuiltInLink_Init(object sender, EventArgs e)
        {
            LinkButton lnk = sender as LinkButton;
            if (lnk != null)
            {
                lnk.Text = Resources.MeasureUnitsControl_AddFromBuiltInLink_Text;
            }
        }

        protected void AddNewLink_Init(object sender, EventArgs e)
        {
            LinkButton lnk = sender as LinkButton;
            if (lnk != null)
            {
                lnk.Text = Resources.MeasureUnitsControl_AddNewLink_Text;
            }
        }

        protected void List_RowCommand(object sender, CommandEventArgs e)
        {
            if (e == null) return;

            int index = -1;
            if (int.TryParse(e.CommandArgument.ToString(), out index) &&
                e.CommandName.Equals("Conversion"))
            {
                List.SelectedIndex = index;
                List.Visible = false;

                EditForm.Visible = true;
                EditForm.ChangeMode(DetailsViewMode.ReadOnly);

                ConversionList.Visible = true;
                ConversionList.DataBind();

                ShowLinkButtonBack();

                MasterDataSet.UnitsOfMeasureRow row = MeasureUnitsProvider.GetMeasureUnitRow((Guid)List.DataKeys[index]["UnitsOfMeasureId"]);
                if (row != null)
                    LinkButtonBack.CommandArgument = row.GroupName;

                base.AddBreadcrumbs();
            }
        }

        protected void GlobalList_RowCommand(object sender, CommandEventArgs e)
        {
            if (e == null) return;

            int index = -1;
            if (int.TryParse(e.CommandArgument.ToString(), out index) &&
                e.CommandName.Equals("Add"))
            {
                MeasureUnitsProvider.OverrideMeasureUnit((Guid)GlobalList.DataKeys[index]["UnitsOfMeasureId"], UserContext.Current.SelectedOrganizationId);
                LinkButtonBack_OnClick(LinkButtonBack, EventArgs.Empty);
                List.DataBind();
            }
        }

        protected void LinkButtonBack_OnClick(object sender, EventArgs e)
        {
            List.SelectedIndex = -1;
            List.Visible = true;

            EditForm.Visible = false;

            ConversionList.Visible = false;
            GlobalList.Visible = false;

            LinkButtonBack.Visible = false;
            LinkButtonBack.CommandArgument = string.Empty;

            base.ResetBreadcrumbs();
        }

        protected void AddNewLink_Click(object sender, EventArgs e)
        {
            List.Visible = false;
            EditForm.Visible = true;
            EditForm.ChangeMode(DetailsViewMode.Insert);
            base.AddBreadcrumbs();
        }

        protected void AddFromBuiltInLink_Click(object sender, EventArgs e)
        {
            List.Visible = false;
            GlobalList.Visible = true;

            ShowLinkButtonBack();
            LinkButtonBack.CommandArgument = string.Empty;

            base.AddBreadcrumbs();
        }

        protected void ConversionList_Action(object sender, CommonGridViewActionEventArgs e)
        {
            Guid sourceid = Guid.Empty;
            try { sourceid = new Guid(EditForm.SelectedValue.ToString()); }
            catch (FormatException) { }
            if (sourceid == Guid.Empty) return;
            DropDownList MeasureUnitList = null;

            if (e == null) return;

            switch (e.Action)
            {
                case CommandActions.Add:
                    MasterDataSet.UnitsOfMeasureRow row = MeasureUnitsProvider.GetMeasureUnitRow(sourceid);
                    if (row == null) return;
                    DataTable table = MeasureUnitsProvider.GetConvertedMeasureUnits(sourceid);
                    DataRow newRow = table.NewRow();
                    newRow["SourceUnitsOfMeasureId"] = row.UnitsOfMeasureId;
                    newRow["SourceSingularName"] = row.SingularName;
                    newRow["SourcePluralName"] = row.PluralName;
                    newRow["TargetUnitsOfMeasureId"] = Guid.Empty;
                    newRow["TargetSingularName"] = string.Empty;
                    newRow["TargetPluralName"] = string.Empty;
                    newRow["Factor"] = 1.0;
                    table.Rows.Add(newRow);
                    ConversionList.DataSourceID = string.Empty;
                    ConversionList.DataSource = table;
                    ConversionList.EditIndex = table.Rows.Count - 1;
                    ConversionList.DataBind();
                    break;
                case CommandActions.Update:
                    TextBox TextBoxFactor = ConversionList.Rows[e.RowIndex].FindControl("TextBoxFactor") as TextBox;
                    MeasureUnitList = ConversionList.Rows[e.RowIndex].FindControl("MeasureUnitList") as DropDownList;
                    if (TextBoxFactor != null && MeasureUnitList != null)
                    {
                        if (MeasureUnitList.SelectedIndex > -1)
                        {
                            double factor = 0.0;
                            if (double.TryParse(TextBoxFactor.Text, out factor))
                            {
                                Guid targetId = Guid.Empty;

                                try { targetId = new Guid(MeasureUnitList.SelectedValue); }
                                catch (FormatException) { }
                                if (factor > 0 && !targetId.Equals(Guid.Empty) && !sourceid.Equals(Guid.Empty))
                                {
                                    MeasureUnitsProvider.UpdateMeasureUnitsConversion(sourceid, targetId, factor);
                                }
                            }
                        }
                    }
                    ConversionList.EditIndex = -1;
                    ConversionList.DataSourceID = "ConversionListDataSource";
                    ConversionList.DataBind();
                    break;
                case CommandActions.Edit:
                    ConversionList.EditIndex = e.RowIndex;
                    ConversionList.DataBind();
                    break;
                case CommandActions.Cancel:
                    ConversionList.EditIndex = -1;
                    ConversionList.DataSourceID = "ConversionListDataSource";
                    ConversionList.DataBind();
                    break;
            }
        }

        protected void MeasureUnitList_OnDataBound(object sender, EventArgs e)
        {
            DropDownList MeasureUnitList = sender as DropDownList;
            if (MeasureUnitList != null && ConversionList.EditIndex > -1)
            {
                MeasureUnitList.SelectedValue = ConversionList.DataKeys[ConversionList.EditIndex]["TargetUnitsOfMeasureId"].ToString();
            }
        }

        protected void EntityDataSource_Inserting(object sender, ObjectDataSourceMethodEventArgs e)
        {
            if (e == null) return;

            ComboBox MeasureGroupsList = EditForm.Rows[5].Cells[1].Controls[0] as ComboBox;
            ComboBox MeasureLocalsList = EditForm.Rows[4].Cells[1].Controls[0] as ComboBox;
            if (MeasureGroupsList != null && MeasureLocalsList != null)
            {
                e.InputParameters["groupName"] = MeasureGroupsList.Text;
                e.InputParameters["localName"] = MeasureLocalsList.Text;
            }
            else e.Cancel = true;
        }

        #endregion
    }
}
