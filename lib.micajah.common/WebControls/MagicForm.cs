using Micajah.Common.Bll;
using Micajah.Common.Bll.Providers;
using Micajah.Common.Configuration;
using Micajah.Common.Pages;
using Micajah.Common.Properties;
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Text;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

namespace Micajah.Common.WebControls
{
    /// <summary>
    /// Displays the values of a single record from a data sourceRow in a table, where each data row represents a field of the record. 
    /// The MagicForm control allows you to edit, delete, and insert records. 
    /// </summary>
    [ToolboxData("<{0}:MagicForm runat=server></{0}:MagicForm>")]
    public class MagicForm : DetailsView, IThemeable
    {
        #region Members

        internal EventHandler<MagicFormActionEventArgs> ActionInternal;

        private ITemplate m_CaptionControls;
        private PlaceHolder m_CaptionControlsContainer;
        private bool m_ExistValidatedFields;
        private SchemeColorSet m_SchemeColorSet;
        private bool m_IsBound;

        #endregion

        #region Public Properties

        /// <summary>
        /// Gets or sets a value indicating whether the built-in control to delete the current record is displayed in the control.
        /// </summary>
        [DefaultValue(false)]
        public new bool AutoGenerateDeleteButton
        {
            get
            {
                object obj = this.ViewState["MagicFormAutoGenerateDeleteButton"];
                return ((obj == null) ? false : (bool)obj);
            }
            set
            {
                this.ViewState["MagicFormAutoGenerateDeleteButton"] = value;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the built-in controls to edit the current record are displayed in the control.
        /// </summary>
        [DefaultValue(false)]
        public new bool AutoGenerateEditButton
        {
            get
            {
                object obj = this.ViewState["MagicFormAutoGenerateEditButton"];
                return ((obj == null) ? false : (bool)obj);
            }
            set
            {
                this.ViewState["MagicFormAutoGenerateEditButton"] = value;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the built-in controls to insert a new record are displayed in the control.
        /// </summary>
        [DefaultValue(false)]
        public new bool AutoGenerateInsertButton
        {
            get
            {
                object obj = this.ViewState["MagicFormAutoGenerateInsertButton"];
                return ((obj == null) ? false : (bool)obj);
            }
            set
            {
                this.ViewState["MagicFormAutoGenerateInsertButton"] = value;
            }
        }

        /// <summary>
        /// Gets or sets the text to render in an HTML caption element in this control.
        /// </summary>
        [Browsable(false)]
        public new string Caption
        {
            get
            {
                string formCaption = (string)this.ViewState["MagicFormCaption"];
                if (string.IsNullOrEmpty(formCaption))
                    formCaption = GetCaption(this.CurrentMode, this.ObjectName);
                return formCaption;
            }
            set { this.ViewState["MagicFormCaption"] = value; }
        }

        /// <summary>
        /// Gets or sets the content which is displayed in the caption section of the control at the left of the add hyperlink.
        /// </summary>
        [PersistenceMode(PersistenceMode.InnerProperty)]
        [Browsable(false)]
        [TemplateInstance(TemplateInstance.Single)]
        public ITemplate CaptionControls
        {
            get { return m_CaptionControls; }
            set { m_CaptionControls = value; }
        }

        /// <summary>
        /// The caption type of the delete button.
        /// </summary>
        [Category("Appearance")]
        [Description("The caption type of the delete button.")]
        [DefaultValue(DeleteButtonCaptionType.Delete)]
        public DeleteButtonCaptionType DeleteButtonCaption
        {
            get
            {
                object obj = ViewState["DeleteButtonCaption"];
                return ((obj == null) ? DeleteButtonCaptionType.Delete : (DeleteButtonCaptionType)obj);
            }
            set { ViewState["DeleteButtonCaption"] = value; }
        }

        /// <summary>
        /// Gets or set value indicating that the delete action requires confirmation.
        /// </summary>
        [Category("Behavior")]
        [DefaultValue(true)]
        public bool EnableDeleteConfirmation
        {
            get
            {
                object obj = ViewState["EnableDeleteConfirmation"];
                return ((obj == null) ? true : (bool)obj);
            }
            set { ViewState["EnableDeleteConfirmation"] = value; }
        }

        /// <summary>
        /// The caption type of the insert button.
        /// </summary>
        [Category("Appearance")]
        [Description("The caption type of the insert button.")]
        [DefaultValue(InsertButtonCaptionType.Create)]
        public InsertButtonCaptionType InsertButtonCaption
        {
            get
            {
                object obj = ViewState["InsertButtonCaption"];
                return ((obj == null) ? InsertButtonCaptionType.Create : (InsertButtonCaptionType)obj);
            }
            set { ViewState["InsertButtonCaption"] = value; }
        }

        /// <summary>
        /// The caption type of the update button.
        /// </summary>
        [Category("Appearance")]
        [Description("The caption type of the update button.")]
        [DefaultValue(UpdateButtonCaptionType.Save)]
        public UpdateButtonCaptionType UpdateButtonCaption
        {
            get
            {
                object obj = ViewState["UpdateButtonCaption"];
                return ((obj == null) ? UpdateButtonCaptionType.Save : (UpdateButtonCaptionType)obj);
            }
            set { ViewState["UpdateButtonCaption"] = value; }
        }

        /// <summary>
        /// Gets the cancel button.
        /// </summary>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public Control CancelButton
        {
            get { return this.FindControl("btnCancel"); }
        }

        /// <summary>
        /// Gets the close button.
        /// </summary>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public Control CloseButton
        {
            get { return this.FindControl("btnUpdateClose"); }
        }

        /// <summary>
        /// Gets the delete button.
        /// </summary>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public Control DeleteButton
        {
            get { return this.FindControl("btnDelete"); }
        }

        /// <summary>
        /// Gets the update button.
        /// </summary>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public Control UpdateButton
        {
            get { return this.FindControl("btnUpdate"); }
        }

        /// <summary>
        /// Gets or sets the value indicating that the cancel button is rendered.
        /// </summary>
        [Category("Behavior")]
        [Description("Whether a cancel button is rendered.")]
        [DefaultValue(true)]
        public bool ShowCancelButton
        {
            get
            {
                object obj = this.ViewState["ShowCancelButton"];
                return ((obj == null) ? true : (bool)obj);
            }
            set { this.ViewState["ShowCancelButton"] = value; }
        }

        /// <summary>
        /// Gets or sets the value indicating the mode in which a close button is shown.
        /// </summary>
        [Category("Behavior")]
        [Description("The mode in which a close button is shown.")]
        [DefaultValue(CloseButtonVisibilityMode.Always)]
        public CloseButtonVisibilityMode ShowCloseButton
        {
            get
            {
                object obj = ViewState["ShowCloseButton"];
                return ((obj == null) ? CloseButtonVisibilityMode.Always : (CloseButtonVisibilityMode)obj);
            }
            set { ViewState["ShowCloseButton"] = value; }
        }

        /// <summary>
        /// Gets or sets the value indicating that the close button is rendered as separate button.
        /// </summary>
        [Category("Behavior")]
        [Description("Whether a close button is rendered as separate button.")]
        [DefaultValue(false)]
        public bool ShowCloseButtonSeparate
        {
            get
            {
                object obj = this.ViewState["ShowCloseButtonSeparate"];
                return ((obj == null) ? false : (bool)obj);
            }
            set { this.ViewState["ShowCloseButtonSeparate"] = value; }
        }

        /// <summary>
        /// Gets or sets the text to display in the header row of a MagicForm control.
        /// </summary>
        [Category("Appearance")]
        [DefaultValue("")]
        public new string HeaderText
        {
            get
            {
                object obj = ViewState["NewHeaderText"];
                return ((obj == null) ? string.Empty : (string)obj);
            }
            set { ViewState["NewHeaderText"] = value; }
        }

        /// <summary>
        /// Gets or sets the number of columns to display in the control.
        /// </summary>
        [Category("Layout")]
        [Description("The number of columns to display in the control.")]
        [DefaultValue(1)]
        public int RepeatColumns
        {
            get
            {
                object obj = ViewState["RepeatColumns"];
                return ((obj == null) ? 1 : (int)obj);
            }
            set
            {
                if (value < 1) value = 1;
                ViewState["RepeatColumns"] = value;
            }
        }

        /// <summary>
        /// Gets or sets the color scheme for the control.
        /// </summary>
        [DefaultValue(ColorScheme.White)]
        [Category("Appearance")]
        [Description("The color scheme for the control.")]
        public ColorScheme ColorScheme
        {
            get
            {
                object obj = ViewState["ColorScheme"];
                return ((obj == null) ? ColorScheme.White : (ColorScheme)obj);
            }
            set
            {
                ViewState["ColorScheme"] = value;
                m_SchemeColorSet = null;
            }
        }

        /// <summary>
        /// Gets or sets the name of the object.
        /// </summary>
        [Category("Appearance")]
        [Description("The name of the object.")]
        [DefaultValue("")]
        public string ObjectName
        {
            get
            {
                object obj = ViewState["ObjectName"];
                return ((obj == null) ? string.Empty : (string)obj);
            }
            set { ViewState["ObjectName"] = value; }
        }

        /// <summary>
        /// Gets or sets the group of controls for which this control causes validation when it posts back to the server.
        /// </summary>
        [Category("Behavior")]
        [Description("The group of controls for which this control causes validation when it posts back to the server.")]
        [DefaultValue("")]
        public virtual string ValidationGroup
        {
            get
            {
                object obj = ViewState["ValidationGroup"];
                return ((obj == null) ? string.Empty : (string)obj);
            }
            set { ViewState["ValidationGroup"] = value; }
        }

        public MasterPageTheme Theme
        {
            get
            {
                object obj = ViewState["Theme"];
                return ((obj == null) ? FrameworkConfiguration.Current.WebApplication.MasterPage.Theme : (MasterPageTheme)obj);
            }
            set { ViewState["Theme"] = value; }
        }

        #endregion

        #region Private Properties

        private int ColumnsCount
        {
            get { return this.RepeatColumns * 2; }
        }

        private int LastDataRowFirstCellIndex
        {
            get
            {
                int cellsCount = 0;
                int fullRowsCount = 0;
                int lastFieldIndex = this.Fields.Count - 1;
                for (int i = 0; i < this.Fields.Count; i++)
                {
                    DataControlField field = this.Fields[i];
                    if ((!field.Visible) || ((this.CurrentMode == DetailsViewMode.Insert) && (!field.InsertVisible)))
                        continue;
                    else if (field is AutoGeneratedButtonsField)
                        break;
                    else if (field is GroupField)
                    {
                        if (i < lastFieldIndex)
                        {
                            if ((cellsCount % this.ColumnsCount) > 0) fullRowsCount++;
                            fullRowsCount++;
                            cellsCount = 0;
                        }
                        continue;
                    }
                    cellsCount += 2;
                    if ((cellsCount % this.ColumnsCount) == 0)
                    {
                        fullRowsCount++;
                        cellsCount = 0;
                    }
                }
                int idx = (fullRowsCount * this.ColumnsCount);
                if (cellsCount == 0) idx -= this.ColumnsCount;
                return idx;
            }
        }

        private bool ShowButtons
        {
            get { return ((AutoGenerateDeleteButton || AutoGenerateEditButton || AutoGenerateInsertButton) && CurrentMode != DetailsViewMode.ReadOnly); }
        }

        private bool ShowHeaderRow
        {
            get { return (!string.IsNullOrEmpty(this.HeaderText)); }
        }

        #endregion

        #region Internal Properties

        /// <summary>
        /// Gets the Required Info HTML table.
        /// </summary>
        internal static HtmlTable RequiredTable
        {
            get
            {
                if (FrameworkConfiguration.Current.WebApplication.MasterPage.Theme == MasterPageTheme.Modern)
                    return null;

                HtmlTable table = new HtmlTable();
                table.CellPadding = table.CellSpacing = 0;

                HtmlTableRow tr = new HtmlTableRow();
                HtmlTableCell td = new HtmlTableCell();
                td.Style.Add(HtmlTextWriterStyle.Width, "3px");
                td.Style.Add(HtmlTextWriterStyle.BackgroundColor, "Maroon");
                td.Style.Add(HtmlTextWriterStyle.WhiteSpace, "nowrap");
                td.InnerHtml = "&nbsp;";
                tr.Cells.Add(td);

                td = new HtmlTableCell();
                td.Attributes["class"] = "Mf_Rq";
                td.InnerHtml = "&nbsp;" + Resources.MagicForm_RequiredInformation_Text;
                tr.Cells.Add(td);

                table.Rows.Add(tr);

                return table;
            }
        }

        internal SchemeColorSet SchemeColorSet
        {
            get
            {
                if (m_SchemeColorSet == null) m_SchemeColorSet = new SchemeColorSet(this.ColorScheme);
                return m_SchemeColorSet;
            }
        }

        internal bool ShowRequiredTable
        {
            get { return ((this.CurrentMode == DetailsViewMode.ReadOnly) ? false : this.m_ExistValidatedFields); }
        }

        internal string ValidationGroupInternal
        {
            get
            {
                if (!string.IsNullOrEmpty(this.ValidationGroup)) return this.ValidationGroup;
                return this.ClientID;
            }
        }

        #endregion

        #region Events

        internal event EventHandler<PostRenderEventArgs> PostRender;

        public event EventHandler<MagicFormActionEventArgs> Action;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the MagicForm class and sets the default values of properties.
        /// </summary>
        public MagicForm()
            : base()
        {
            this.ActionInternal = new EventHandler<MagicFormActionEventArgs>(this.OnAction);
        }

        #endregion

        #region Private Methods

        private static void AnalyzeFirstCell(DetailsViewRow row, DetailsViewMode currentMode, int cellsCount, ref DataControlField field, ref bool showHeader, ref bool paddingLeft, ref bool render)
        {
            if (!row.Visible)
                render = false;
            else if (row.Cells.Count > 0)
            {
                DataControlFieldCell fieldCell = row.Cells[0] as DataControlFieldCell;
                if (fieldCell != null)
                {
                    field = fieldCell.ContainingField;
                    if (field != null)
                    {
                        showHeader = field.ShowHeader;
                        if (row.RowType == DataControlRowType.DataRow)
                        {
                            if (currentMode == DetailsViewMode.ReadOnly)
                                paddingLeft = (!(field is CheckBoxField));
                            else
                            {
                                TemplateField tf = field as TemplateField;
                                if (tf != null)
                                    paddingLeft = tf.PaddingLeft;
                                else if (!(field is IValidated))
                                    paddingLeft = true;
                            }

                            if ((!field.Visible) || ((currentMode == DetailsViewMode.Insert) && (!field.InsertVisible)))
                            {
                                render = false;
                            }
                            else if (cellsCount == 0)
                            {
                                GroupField groupField = field as GroupField;
                                if (groupField != null) render = (groupField.Text.Trim().Length > 0);
                            }
                        }
                    }
                }
            }
        }

        private void ApplyStyle(SchemeColorSet schemeColorSet)
        {
            if (schemeColorSet == null) throw new ArgumentNullException("schemeColorSet");

            base.BorderColor = schemeColorSet.Dark;
            base.BackColor = schemeColorSet.Light;
        }

        private void EnsureCaptionControls()
        {
            if (m_CaptionControls != null)
            {
                m_CaptionControlsContainer = new PlaceHolder();
                m_CaptionControlsContainer.ID = "CaptionControlsContainer";

                this.Controls.Add(m_CaptionControlsContainer);

                m_CaptionControls.InstantiateIn(m_CaptionControlsContainer);
            }
        }

        private void OnAction(object sender, MagicFormActionEventArgs e)
        {
            if (this.Action != null) this.Action(sender, e);
        }

        private static void ProcessRowCells(TableRow row, string cssClass)
        {
            foreach (TableCell cell in row.Cells)
            {
                ApplyCssClassToCell(cell, cssClass);
            }
        }

        private static void ProcessRowCells(TableRow row, string cssClass, MasterPageTheme theme, bool topLabel)
        {
            foreach (TableCell cell in row.Cells)
            {
                ApplyCssClassToCell(cell, cssClass);

                ProcessCellControls(cell.Controls, theme, topLabel);
            }
        }

        private static void ProcessRowCells(HtmlTableRow row, string cssClass)
        {
            foreach (HtmlTableCell cell in row.Cells)
            {
                ApplyCssClassToCell(cell, cssClass);
            }
        }

        private static void ProcessRowCells(HtmlTableRow row, string cssClass, MasterPageTheme theme, bool topLabel)
        {
            foreach (HtmlTableCell cell in row.Cells)
            {
                ApplyCssClassToCell(cell, cssClass);

                ProcessCellControls(cell.Controls, theme, topLabel);
            }
        }

        private static void ProcessCellControls(ControlCollection controls, MasterPageTheme theme, bool topLabel)
        {
            string cssClass = (topLabel ? "Mf_Htl" : "Mf_Ht");

            foreach (System.Web.UI.Control ctl in controls)
            {
                if (ctl is PlaceHolder || ctl is Panel || ctl is Telerik.Web.UI.RadAjaxPanel)
                {
                    ProcessCellControls(ctl.Controls, theme, topLabel);
                }
                else
                {
                    UpdatePanel up = ctl as UpdatePanel;
                    if (up != null)
                    {
                        ProcessCellControls(up.ContentTemplateContainer.Controls, theme, topLabel);
                    }
                    else
                    {
                        IThemeable t = ctl as IThemeable;
                        if (t != null)
                            t.Theme = theme;

                        Label l = ctl as Label;
                        if (l != null)
                        {
                            if (l.CssClass.IndexOf("Error", StringComparison.OrdinalIgnoreCase) == -1)
                            {
                                if (!(" " + l.CssClass + " ").Contains(" " + cssClass + " "))
                                {
                                    if (!string.IsNullOrEmpty(l.CssClass)) l.CssClass += " ";
                                    l.CssClass += cssClass;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Registers the MagicForm stylesheet file on the page.
        /// </summary>
        /// <param name="control">The control that is registering the stylesheet file.</param>
        /// <param name="theme">The theme of the control.</param>
        internal static void RegisterStyleSheet(Control control, MasterPageTheme theme)
        {
            if (theme == MasterPageTheme.Modern)
                ResourceProvider.RegisterStyleSheetResource(control, ResourceProvider.MagicFormModernStyleSheet, "MagicFormModernStyleSheet", true);
            else
                ResourceProvider.RegisterStyleSheetResource(control, "Styles.MagicForm.css", "MagicFormStyleSheet", true);
        }

        private void RenderRow(DetailsViewRow row, HtmlTextWriter writer)
        {
            if (row == null || writer == null) return;

            row.RenderBeginTag(writer);

            if (row.Cells.Count > 0)
            {
                TableCell cell = row.Cells[0];
                if (row.RowType != DataControlRowType.EmptyDataRow)
                {
                    cell.ColumnSpan = this.ColumnsCount;
                }
                cell.RenderControl(writer);
            }

            row.RenderEndTag(writer);
        }

        private void RenderCaptionRow(HtmlTextWriter writer)
        {
            if ((!DesignMode) && string.IsNullOrEmpty(ObjectName))
                throw new ArgumentNullException(ObjectName, Resources.ExceptionMessage_ObjectNameIsEmpty);
            if (writer == null) return;

            if (this.DesignMode)
                this.EnsureCaptionControls();

            if ((!string.IsNullOrEmpty(this.Caption)) || (m_CaptionControlsContainer != null))
            {
                writer.RenderBeginTag(HtmlTextWriterTag.Tr);
                writer.AddAttribute(HtmlTextWriterAttribute.Colspan, (this.RepeatColumns * 2).ToString(CultureInfo.CurrentCulture));

                if (m_CaptionControlsContainer != null)
                {
                    writer.RenderBeginTag(HtmlTextWriterTag.Td);
                    writer.AddAttribute(HtmlTextWriterAttribute.Cellpadding, "0");
                    writer.AddAttribute(HtmlTextWriterAttribute.Cellspacing, "0");
                    writer.AddStyleAttribute(HtmlTextWriterStyle.Width, "100%");
                    writer.RenderBeginTag(HtmlTextWriterTag.Table);
                    writer.RenderBeginTag(HtmlTextWriterTag.Tr);
                }

                if (!string.IsNullOrEmpty(this.Caption))
                {
                    writer.AddAttribute(HtmlTextWriterAttribute.Class, "Mf_Cpt");
                    if (this.Theme != MasterPageTheme.Modern)
                        writer.AddStyleAttribute(HtmlTextWriterStyle.Color, this.SchemeColorSet.DarkHtml);
                    writer.RenderBeginTag(HtmlTextWriterTag.Td);
                    if (!string.IsNullOrEmpty(this.Caption)) writer.Write(this.Caption);
                    writer.RenderEndTag();
                }

                if (m_CaptionControlsContainer != null)
                {
                    writer.AddAttribute(HtmlTextWriterAttribute.Class, "Mf_CptCtrls");
                    writer.RenderBeginTag(HtmlTextWriterTag.Td);

                    int count = m_CaptionControlsContainer.Controls.Count;

                    StringBuilder sb = new StringBuilder();
                    StringWriter sw = null;
                    try
                    {
                        sw = new StringWriter(sb, CultureInfo.InvariantCulture);
                        HtmlTextWriter wr = new HtmlTextWriter(sw);

                        foreach (Control ctl in m_CaptionControlsContainer.Controls)
                        {
                            count--;
                            ctl.RenderControl(wr);
                            if (!Support.StringIsNullOrEmpty(sb.ToString()))
                            {
                                writer.Write(sb.ToString());
                                if (count > 1) writer.Write("&nbsp;&nbsp;&nbsp;&nbsp;");
                            }
                            sb.Remove(0, sb.Length);
                        }
                    }
                    finally
                    {
                        if (sw != null)
                        {
                            sw.Dispose();
                        }
                    }

                    writer.RenderEndTag();
                    writer.RenderEndTag();
                    writer.RenderEndTag();
                    writer.RenderEndTag();
                }

                writer.RenderEndTag();
            }
        }

        private void RenderHeader(HtmlTextWriter writer)
        {
            if (writer == null) return;

            this.RenderCaptionRow(writer);
            this.RenderRow(base.TopPagerRow, writer);
            if (this.ShowHeaderRow) this.RenderHeaderRow(writer);
        }

        private void RenderHeaderRow(HtmlTextWriter writer)
        {
            if (string.IsNullOrEmpty(HeaderText)) return;
            writer.RenderBeginTag(HtmlTextWriterTag.Tr); // Tr
            writer.AddAttribute(HtmlTextWriterAttribute.Class, "Mf_H");
            writer.AddAttribute(HtmlTextWriterAttribute.Colspan, (this.RepeatColumns * 2).ToString(CultureInfo.CurrentCulture));
            if (this.Theme != MasterPageTheme.Modern)
            {
                writer.AddStyleAttribute("border-top-color", this.SchemeColorSet.DarkHtml);
                writer.AddStyleAttribute("border-bottom-color", this.SchemeColorSet.DarkHtml);
            }
            writer.RenderBeginTag(HtmlTextWriterTag.Td); // Td
            writer.Write(HeaderText);
            writer.RenderEndTag(); // Td
            writer.RenderEndTag(); // Tr            
        }

        private void RenderFooter(HtmlTextWriter writer)
        {
            if (writer == null) return;

            if (base.FooterRow != null)
            {
                bool FooterRowRender = false;
                if (base.FooterRow.Cells.Count > 0)
                {
                    base.FooterRow.Cells[0].CssClass = "Mf_H";
                    if (base.FooterRow.Cells[0].HasControls() || (base.FooterRow.Cells[0].Text.Trim().Length > 0))
                        FooterRowRender = true;
                    else if (!string.IsNullOrEmpty(base.FooterText))
                    {
                        base.FooterRow.Cells[0].Text = base.FooterText;
                        FooterRowRender = true;
                    }
                }
                if (FooterRowRender)
                {
                    if (this.Theme != MasterPageTheme.Modern)
                    {
                        base.FooterRow.Cells[0].Style.Add("border-top-color", this.SchemeColorSet.DarkHtml);
                        base.FooterRow.Cells[0].Style.Add("border-bottom-color", this.SchemeColorSet.DarkHtml);
                    }
                    this.RenderRow(base.FooterRow, writer);
                }
            }

            this.RenderRow(base.BottomPagerRow, writer);
        }

        private void RenderSpannedCell(HtmlTextWriter writer, TableCell cell, DetailsViewRow row, DataControlField field, int rowIndex, ref int cellsCount, ref int totalCellsCount, ref bool paddingTop)
        {
            bool isAutoGeneratedButtonsField = field is AutoGeneratedButtonsField;

            if (cell.Attributes["SpannedCell"] == "start")
            {
                if (this.Theme == MasterPageTheme.Modern)
                {
                    if (isAutoGeneratedButtonsField)
                    {
                        cell.Attributes.Remove("SpannedCell");
                        cell.RenderControl(writer);
                    }
                }
            }
            else if (cell.Attributes["SpannedCell"] == "text")
            {
                int colSpan = (this.ColumnsCount - cellsCount);
                if ((cell.Text.Trim().Length > 0) || (cell.Controls.Count > 0))
                {
                    if ((row.RowIndex > 0) && (cellsCount > 0))
                    {
                        if (colSpan > 1) writer.AddAttribute(HtmlTextWriterAttribute.Colspan, Convert.ToString(colSpan, CultureInfo.CurrentCulture));
                        writer.AddAttribute(HtmlTextWriterAttribute.Class, "Mf_R" + (paddingTop ? " Mf_Rf" : string.Empty));
                        writer.RenderBeginTag(HtmlTextWriterTag.Td);
                        writer.Write("&nbsp;");
                        writer.RenderEndTag();
                        row.RenderEndTag(writer);
                        row.RenderBeginTag(writer);
                        totalCellsCount += ((colSpan > 1) ? colSpan : 1);
                    }

                    colSpan = this.ColumnsCount;

                    if (isAutoGeneratedButtonsField)
                    {
                        if (this.Theme == MasterPageTheme.Modern)
                            colSpan -= 1;
                    }
                    else
                    {
                        if (this.Theme != MasterPageTheme.Modern)
                        {
                            cell.Style.Add("border-top-color", this.SchemeColorSet.DarkHtml);
                            cell.Style.Add("border-bottom-color", this.SchemeColorSet.DarkHtml);
                        }
                    }
                }
                else
                    cell.CssClass = "Mf_R" + (paddingTop ? " Mf_Rf" : string.Empty);

                if (colSpan < 2) colSpan = 0;

                cell.ColumnSpan = colSpan;
                cell.Attributes.Remove("SpannedCell");
                cell.RenderControl(writer);

                cellsCount = this.ColumnsCount;
                totalCellsCount += this.ColumnsCount;

                if (rowIndex > 0) paddingTop = false;
            }
        }

        #endregion

        #region Internal Methods

        internal static void ApplyCssClassToCell(TableCell cell, string cssClass)
        {
            if (!string.IsNullOrEmpty(cssClass))
            {
                if (!(" " + cell.CssClass + " ").Contains(" " + cssClass + " "))
                {
                    if (!string.IsNullOrEmpty(cell.CssClass)) cell.CssClass += " ";
                    cell.CssClass += cssClass;
                }
            }
        }

        internal static void ApplyCssClassToCell(HtmlTableCell cell, string cssClass)
        {
            if (!string.IsNullOrEmpty(cssClass))
            {
                string cellCssClass = cell.Attributes["class"];
                if (!(" " + cellCssClass + " ").Contains(" " + cssClass + " "))
                {
                    if (!string.IsNullOrEmpty(cellCssClass)) cellCssClass += " ";
                    cellCssClass += cssClass;
                    cell.Attributes["class"] = cellCssClass;
                }
            }
        }

        internal static string GetCaption(DetailsViewMode currentMode, string objectName)
        {
            string formCaption = string.Empty;
            switch (currentMode)
            {
                case DetailsViewMode.ReadOnly:
                    formCaption = Resources.MagicForm_Caption_ReadOnlyMode;
                    break;
                case DetailsViewMode.Insert:
                    formCaption = Resources.MagicForm_Caption_InsertMode;
                    break;
                case DetailsViewMode.Edit:
                    formCaption = Resources.MagicForm_Caption_EditMode;
                    break;
            }
            formCaption += "&nbsp;" + objectName;
            return formCaption;
        }

        internal static string GetUpdateButtonText(DetailsViewMode currentMode, string objectName)
        {
            return GetUpdateButtonText(currentMode, objectName, InsertButtonCaptionType.Create, UpdateButtonCaptionType.Save, CloseButtonVisibilityMode.Always);
        }

        internal static string GetUpdateButtonText(DetailsViewMode currentMode, string objectName
            , InsertButtonCaptionType insertButtonCaptionType, UpdateButtonCaptionType updateButtonCaptionType
            , CloseButtonVisibilityMode closeButtonVisibility)
        {
            string text = string.Empty;
            string closeButtonText = string.Empty;
            switch (currentMode)
            {
                case DetailsViewMode.Insert:
                    switch (insertButtonCaptionType)
                    {
                        case InsertButtonCaptionType.Create:
                            text = Resources.AutoGeneratedButtonsField_CreateButton_Text;
                            break;
                        case InsertButtonCaptionType.Send:
                            text = Resources.AutoGeneratedButtonsField_SendButton_Text;
                            break;
                    }
                    if ((closeButtonVisibility == CloseButtonVisibilityMode.Insert) || (closeButtonVisibility == CloseButtonVisibilityMode.Always))
                        closeButtonText = Resources.AutoGeneratedButtonsField_CloseButton_Text;
                    break;
                case DetailsViewMode.Edit:
                    switch (updateButtonCaptionType)
                    {
                        case UpdateButtonCaptionType.Save:
                            text = Resources.AutoGeneratedButtonsField_SaveButton_Text;
                            break;
                        case UpdateButtonCaptionType.Send:
                            text = Resources.AutoGeneratedButtonsField_SendButton_Text;
                            break;
                    }
                    if ((closeButtonVisibility == CloseButtonVisibilityMode.Edit) || (closeButtonVisibility == CloseButtonVisibilityMode.Always))
                        closeButtonText = Resources.AutoGeneratedButtonsField_CloseButton_Text;
                    break;
            }
            if (!string.IsNullOrEmpty(objectName))
                text += " " + objectName;
            if (!string.IsNullOrEmpty(closeButtonText)) text += " & " + closeButtonText;
            return text;
        }

        internal static Control AddRequiredTable(Control control)
        {
            if (FrameworkConfiguration.Current.WebApplication.MasterPage.Theme == MasterPageTheme.Modern)
                return control;

            HtmlTable table = new HtmlTable();
            table.Width = "100%";
            table.CellPadding = table.CellSpacing = 0;

            HtmlTableRow tr = new HtmlTableRow();
            HtmlTableCell td = new HtmlTableCell();
            Control container = td;
            tr.Cells.Add(td);

            td = new HtmlTableCell();
            td.Style.Add(HtmlTextWriterStyle.PaddingLeft, "20px");
            td.Align = "right";
            td.Controls.Add(RequiredTable);
            tr.Cells.Add(td);

            table.Rows.Add(tr);

            control.Controls.Add(table);

            return container;
        }

        /// <summary>
        /// Registers the MagicForm stylesheet file on the page.
        /// </summary>
        /// <param name="control">The control that is registering the stylesheet file.</param>
        internal static void RegisterStyleSheet(Control control)
        {
            RegisterStyleSheet(control, FrameworkConfiguration.Current.WebApplication.MasterPage.Theme);
        }

        #endregion

        #region Overriden Methods

        protected override int CreateChildControls(IEnumerable dataSource, bool dataBinding)
        {
            int result = base.CreateChildControls(dataSource, dataBinding);

            this.EnsureCaptionControls();

            return result;
        }

        /// <summary>
        /// Creates the complete set of automatically generated and user-defined row fields used to generate the control hierarchy.
        /// </summary>
        /// <param name="dataItem">The data item for which to create the row fields.</param>
        /// <param name="useDataSource">true to use the data item to create the automatically generated row fields; otherwise, false.</param>
        /// <returns>An ICollection that contains both the automatically generated and the user-defined row fields for the specified data item.</returns>
        protected override ICollection CreateFieldSet(object dataItem, bool useDataSource)
        {
            ICollection fields = base.CreateFieldSet(dataItem, useDataSource);

            foreach (object field in fields)
            {
                BaseValidatedField validatedField = (field as BaseValidatedField);
                if (validatedField != null)
                {
                    validatedField.ValidationGroup = this.ValidationGroupInternal;
                    if (validatedField.Required) m_ExistValidatedFields = true;
                    if (!Enabled) validatedField.Enabled = Enabled;
                }

                IThemeable f = field as IThemeable;
                if (f != null)
                    f.Theme = this.Theme;
            }

            if (ShowButtons)
            {
                ArrayList list = new ArrayList(fields);
                AutoGeneratedButtonsField autoGeneratedButtonsField = new AutoGeneratedButtonsField(this);
                list.Add(autoGeneratedButtonsField);
                fields = list;
            }

            return fields;
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            base.GridLines = GridLines.None;
            base.CellPadding = base.CellSpacing = 0;
            base.CssClass = "Mf_T";
        }

        protected override void OnPagePreLoad(object sender, EventArgs e)
        {
            base.OnPagePreLoad(sender, e);

            if (!m_IsBound)
            {
                if (m_CaptionControls != null)
                {
                    this.RequiresDataBinding = true;
                    if (!m_IsBound)
                        this.EnsureDataBound();
                }
            }
        }

        protected override void EnsureDataBound()
        {
            base.EnsureDataBound();
            m_IsBound = true;
        }

        /// <summary>
        /// Raises the System.Web.UI.Control.PreRender event and registers the style sheet of the control.
        /// </summary>
        /// <param name="e">An System.EventArgs object that contains the event data.</param>
        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);

            RegisterStyleSheet(this, this.Theme);
        }

        /// <summary>
        /// Displays the control on the client using the specified HtmlTextWriter object.
        /// </summary>
        /// <param name="writer">An HtmlTextWriter that contains the output stream to render on the client.</param>
        protected override void Render(HtmlTextWriter writer)
        {
            if (writer == null) return;

            StringBuilder sb = new StringBuilder();
            HtmlTextWriter innerWriter = new HtmlTextWriter(new StringWriter(sb, CultureInfo.InvariantCulture));

            base.PrepareControlHierarchy();
            if (FrameworkConfiguration.Current.WebApplication.MasterPage.Theme != MasterPageTheme.Modern)
                this.ApplyStyle(this.SchemeColorSet);

            int rowsCount = this.Rows.Count;
            if (rowsCount == 0) return;

            base.RenderBeginTag(innerWriter);
            this.RenderHeader(innerWriter);

            DetailsViewMode currentMode = this.CurrentMode;
            int cellsCount = 0;
            int totalCellsCount = 0;
            bool paddingTop = true;
            int lastDataRowFirstCellIndex = this.LastDataRowFirstCellIndex;

            for (int rowIndex = 0; rowIndex < rowsCount; rowIndex++)
            {
                DetailsViewRow row = this.Rows[rowIndex];
                DataControlField field = null;
                bool render = true;
                bool paddingLeft = false;
                bool showHeader = true;

                AnalyzeFirstCell(row, currentMode, cellsCount, ref field, ref showHeader, ref paddingLeft, ref render);
                if (!render) continue;

                if (row.RowType == DataControlRowType.DataRow)
                {
                    if (cellsCount == 0) row.RenderBeginTag(innerWriter);

                    foreach (TableCell cell in row.Cells)
                    {
                        if (cell.Attributes["SpannedCell"] != null)
                            RenderSpannedCell(innerWriter, cell, row, field, rowIndex, ref cellsCount, ref totalCellsCount, ref paddingTop);
                        else
                        {
                            bool headerCell = ((cellsCount % 2) == 0);
                            cell.CssClass = "Mf_R";

                            if (this.RepeatColumns > 1)
                            {
                                if (headerCell && (rowIndex > 0) && (cellsCount > 0)) cell.CssClass += " Mf_HcPl";

                                if (((rowIndex + 1) <= rowsCount) && ((cellsCount + 1) == row.Cells.Count))
                                {
                                    bool lastCellInRow = false;
                                    if ((rowIndex + 1) < rowsCount)
                                    {
                                        DetailsViewRow rowNext = this.Rows[rowIndex + 1];
                                        if (rowNext.Cells.Count > 0)
                                        {
                                            DataControlFieldCell fieldCell = rowNext.Cells[0] as DataControlFieldCell;
                                            if (fieldCell != null)
                                            {
                                                if ((fieldCell.ContainingField is GroupField) || (fieldCell.ContainingField is AutoGeneratedButtonsField))
                                                    lastCellInRow = true;
                                            }
                                        }
                                    }
                                    else
                                        lastCellInRow = true;

                                    if (lastCellInRow)
                                    {
                                        int colSpan = (this.ColumnsCount - cellsCount);
                                        cell.ColumnSpan = colSpan;
                                        cellsCount = colSpan;
                                    }
                                }
                            }

                            if (paddingLeft && (!headerCell)) cell.CssClass += " Mf_Rpl";
                            if (paddingTop) cell.CssClass += " Mf_Rf";
                            if ((lastDataRowFirstCellIndex > -1) && (totalCellsCount >= lastDataRowFirstCellIndex)) cell.CssClass += " Mf_Rl";
                            if (headerCell && (!string.IsNullOrEmpty(cell.Text)))
                            {
                                if (cell.Text != "&nbsp;")
                                {
                                    using (HtmlGenericControl label = new HtmlGenericControl("label"))
                                    {
                                        label.Attributes["class"] = "Mf_Ht";
                                        label.InnerText = cell.Text;
                                        cell.Controls.Add(label);
                                    }
                                }
                            }
                            cell.RenderControl(innerWriter);
                            cellsCount++;
                            if (!showHeader) cellsCount++;
                            totalCellsCount += ((cell.ColumnSpan > 1) ? cell.ColumnSpan : 1);

                            if (cellsCount >= this.ColumnsCount) paddingTop = false;
                        }
                    }

                    if (cellsCount >= this.ColumnsCount)
                    {
                        row.RenderEndTag(innerWriter);
                        cellsCount = 0;
                    }
                }
                else
                {
                    if (row.RowType != DataControlRowType.EmptyDataRow && row.Cells.Count > 0)
                    {
                        row.Cells[0].ColumnSpan = ColumnsCount;
                        row.Cells[0].CssClass = "Mf_R";
                    }
                    row.RenderControl(innerWriter);
                }
            }

            this.RenderFooter(innerWriter);
            base.RenderEndTag(innerWriter);

            string content = sb.ToString();

            if (this.PostRender != null)
            {
                PostRenderEventArgs args = new PostRenderEventArgs(content);
                this.PostRender(this, args);
                content = args.Content;
            }

            writer.Write(content);
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Applies the MagicForm's styles to the table.
        /// </summary>
        /// <param name="table">The System.Web.UI.WebControls.Table object to apply the styles to.</param>
        public static void ApplyStyle(Table table)
        {
            ApplyStyle(table, ColorScheme.White);
        }

        /// <summary>
        /// Applies the MagicForm's styles to the table.
        /// </summary>
        /// <param name="table">The System.Web.UI.WebControls.Table object to apply the styles to.</param>
        /// <param name="scheme">The Micajah.Common.Style.ColorScheme object that specifies the color scheme to apply.</param>
        public static void ApplyStyle(Table table, ColorScheme scheme)
        {
            ApplyStyle(table, scheme, false, false);
        }

        /// <summary>
        /// Applies the MagicForm's styles to the table.
        /// </summary>
        /// <param name="table">The System.Web.UI.WebControls.Table object to apply the styles to.</param>
        /// <param name="scheme">The Micajah.Common.Style.ColorScheme object that specifies the color scheme to apply.</param>
        /// <param name="applyToRowsOnly">Whether the styles should be applied to table rows only.</param>
        /// <param name="topLabels">Whether the text labels are placed above the control.</param>
        public static void ApplyStyle(Table table, ColorScheme scheme, bool applyToRowsOnly, bool topLabels)
        {
            ApplyStyle(table, scheme, applyToRowsOnly, topLabels, FrameworkConfiguration.Current.WebApplication.MasterPage.Theme);
        }

        /// <summary>
        /// Applies the MagicForm's styles to the table.
        /// </summary>
        /// <param name="table">The System.Web.UI.WebControls.Table object to apply the styles to.</param>
        /// <param name="scheme">The Micajah.Common.Style.ColorScheme object that specifies the color scheme to apply.</param>
        /// <param name="applyToRowsOnly">Whether the styles should be applied to table rows only.</param>
        /// <param name="topLabels">Whether the text labels are placed above the control.</param>
        /// <param name="theme">The theme of which the styles should be applied.</param>
        public static void ApplyStyle(Table table, ColorScheme scheme, bool applyToRowsOnly, bool topLabels, MasterPageTheme theme)
        {
            if (table == null) return;

            table.CellSpacing = table.CellPadding = 0;
            if (!applyToRowsOnly) table.CssClass = "Mf_T";

            TableRow row = null;
            int rowsCount = table.Rows.Count;
            int firstDataRowIndex = -1;
            int lastDataRowIndex = -1;
            string cssClass = null;

            for (int idx = 0; idx < rowsCount; idx++)
            {
                row = table.Rows[idx];

                cssClass = "Mf_R";
                if (row.CssClass == "Caption")
                    cssClass = "Mf_Cpt";
                else if (row.CssClass == "Header")
                    cssClass = "Mf_H";
                else if (row.CssClass == "Group")
                    cssClass = "Mf_H";
                else if (row.CssClass == "Button")
                    cssClass = "Mf_B";
                else if (row.CssClass == "Footer")
                    cssClass = "Mf_H";
                else if (row is TableHeaderRow)
                    cssClass = ((row.TableSection == TableRowSection.TableHeader) ? "Mf_Cpt" : "Mf_H");
                else if (row is TableFooterRow)
                    cssClass = ((row.TableSection == TableRowSection.TableFooter) ? "Mf_H" : "Mf_B");
                else if (row.Visible)
                {
                    if ((firstDataRowIndex < 0) && (!applyToRowsOnly))
                        firstDataRowIndex = idx;
                    lastDataRowIndex = idx;
                }

                row.CssClass = string.Empty;

                if (firstDataRowIndex == idx)
                    cssClass += " Mf_Rf";

                ProcessRowCells(row, cssClass, theme, topLabels);
            }

            if (theme != MasterPageTheme.Modern)
            {
                SchemeColorSet colorSet = new SchemeColorSet(scheme);

                table.BorderColor = colorSet.Dark;
                table.BackColor = colorSet.Light;
                table.ForeColor = ColorTranslator.FromHtml(colorSet.DarkHtml);
            }

            if ((lastDataRowIndex > -1) && (!applyToRowsOnly))
                ProcessRowCells(table.Rows[lastDataRowIndex], "Mf_Rl");

            RegisterStyleSheet(table, theme);
        }

        /// <summary>
        /// Applies the MagicForm's styles to the table.
        /// </summary>
        /// <param name="table">The System.Web.UI.HtmlControls.HtmlTable object to apply the styles to.</param>
        public static void ApplyStyle(HtmlTable table)
        {
            ApplyStyle(table, ColorScheme.White);
        }

        /// <summary>
        /// Applies the MagicForm's styles to the table.
        /// </summary>
        /// <param name="table">The System.Web.UI.HtmlControls.HtmlTable object to apply the styles to.</param>
        /// <param name="scheme">The Micajah.Common.Style.ColorScheme object that specifies the color scheme to apply.</param>
        public static void ApplyStyle(HtmlTable table, ColorScheme scheme)
        {
            ApplyStyle(table, scheme, false, false);
        }

        /// <summary>
        /// Applies the MagicForm's styles to the table.
        /// </summary>
        /// <param name="table">The System.Web.UI.HtmlControls.HtmlTable object to apply the styles to.</param>
        /// <param name="scheme">The Micajah.Common.Style.ColorScheme object that specifies the color scheme to apply.</param>
        /// <param name="applyToRowsOnly">Whether the styles should be applied to table rows only.</param>
        /// <param name="topLabels">Whether the text labels are placed above the control.</param>
        public static void ApplyStyle(HtmlTable table, ColorScheme scheme, bool applyToRowsOnly, bool topLabels)
        {
            ApplyStyle(table, scheme, applyToRowsOnly, topLabels, FrameworkConfiguration.Current.WebApplication.MasterPage.Theme);
        }

        /// <summary>
        /// Applies the MagicForm's styles to the table.
        /// </summary>
        /// <param name="table">The System.Web.UI.HtmlControls.HtmlTable object to apply the styles to.</param>
        /// <param name="scheme">The Micajah.Common.Style.ColorScheme object that specifies the color scheme to apply.</param>
        /// <param name="applyToRowsOnly">Whether the styles should be applied to table rows only.</param>
        /// <param name="topLabels">Whether the text labels are placed above the control.</param>
        /// <param name="theme">The theme of which the styles should be applied.</param>
        public static void ApplyStyle(HtmlTable table, ColorScheme scheme, bool applyToRowsOnly, bool topLabels, MasterPageTheme theme)
        {
            if (table == null) return;

            table.CellSpacing = table.CellPadding = 0;
            if (!applyToRowsOnly) table.Attributes["class"] = "Mf_T";

            HtmlTableRow row = null;
            int rowsCount = table.Rows.Count;
            int firstDataRowIndex = -1;
            int lastDataRowIndex = -1;
            string cssClass = null;

            for (int idx = 0; idx < rowsCount; idx++)
            {
                row = table.Rows[idx];

                cssClass = "Mf_R";
                if (row.Attributes["class"] == "Caption")
                    cssClass = "Mf_Cpt";
                else if (row.Attributes["class"] == "Header")
                    cssClass = "Mf_H";
                else if (row.Attributes["class"] == "Group")
                    cssClass = "Mf_H";
                else if (row.Attributes["class"] == "Button")
                    cssClass = "Mf_B";
                else if (row.Attributes["class"] == "Footer")
                    cssClass = "Mf_H";
                else if (row.Visible)
                {
                    if ((firstDataRowIndex < 0) && (!applyToRowsOnly))
                        firstDataRowIndex = idx;
                    lastDataRowIndex = idx;
                }

                row.Attributes.Remove("class");

                if (firstDataRowIndex == idx)
                    cssClass += " Mf_Rf";

                ProcessRowCells(row, cssClass, theme, topLabels);
            }

            if (theme != MasterPageTheme.Modern)
            {
                SchemeColorSet colorSet = new SchemeColorSet(scheme);

                table.Style[HtmlTextWriterStyle.Color] = table.Style[HtmlTextWriterStyle.BorderColor] = colorSet.DarkHtml;
                table.Style[HtmlTextWriterStyle.BackgroundColor] = colorSet.LightHtml;
            }

            if ((lastDataRowIndex > -1) && (!applyToRowsOnly))
                ProcessRowCells(table.Rows[lastDataRowIndex], "Mf_Rl");

            RegisterStyleSheet(table, theme);
        }

        #endregion
    }
}
