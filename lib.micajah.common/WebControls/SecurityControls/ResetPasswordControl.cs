using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Micajah.Common.Application;
using Micajah.Common.Bll;
using Micajah.Common.Bll.Providers;
using Micajah.Common.Configuration;
using Micajah.Common.Dal;
using Micajah.Common.Properties;

namespace Micajah.Common.WebControls.SecurityControls
{
    public class ResetPasswordControl : UserControl
    {
        #region Members

        protected HtmlGenericControl MainContainer;
        protected HtmlGenericControl ErrorDiv;
        protected Label TitleLabel;
        protected Label DescriptionLabel;
        protected HtmlTable FormTable;
        protected Label LoginLabel;
        protected TextBox LoginTextBox;
        protected Label PasswordLabel;
        protected TextBox PasswordTextBox;
        protected Label ConfirmPasswordLabel;
        protected TextBox ConfirmPasswordTextBox;
        protected CustomValidator PasswordCompareValidator;
        protected Button SubmitButton;
        protected PlaceHolder ButtonsSeparator;
        protected LinkButton LogOnPageButton;
        protected LinkButton LogOnPageButton2;

        private Guid? m_ResetPasswordRequestId;

        #endregion

        #region Private Properties

        private Guid LoginId
        {
            get
            {
                object obj = this.ViewState["LoginId"];
                return ((obj == null) ? Guid.Empty : (Guid)obj);
            }
            set { this.ViewState["LoginId"] = value; }
        }

        private Guid ResetPasswordRequestId
        {
            get
            {
                if (!m_ResetPasswordRequestId.HasValue)
                {
                    object obj = Support.ConvertStringToType(Request.QueryString["r"], typeof(Guid));
                    m_ResetPasswordRequestId = ((obj == null) ? Guid.Empty : (Guid)obj);
                }
                return m_ResetPasswordRequestId.Value;
            }
        }

        #endregion

        #region Private Methods

        private void LoadResources()
        {
            TitleLabel.Text = Resources.ResetPasswordControl_TitleLabel_Text;
            DescriptionLabel.Text = Resources.ResetPasswordControl_DescriptionLabel_Text;
            PasswordCompareValidator.ErrorMessage = Resources.ResetPasswordControl_PasswordCompareValidator_ErrorMessage;
            SubmitButton.Text = Resources.ResetPasswordControl_SubmitButton_Text;
            PasswordLabel.Text = Resources.ResetPasswordControl_PasswordLabel_Text;
            ConfirmPasswordLabel.Text = Resources.ResetPasswordControl_ConfirmPasswordLabel_Text;
            LogOnPageButton.Text = LogOnPageButton2.Text = Resources.ResetPasswordControl_LoginPageLink_Text_ReturnToLoginPage;
            if (FrameworkConfiguration.Current.WebApplication.Integration.Ldap.Enabled)
                LoginLabel.Text = Resources.LoginElement_LdapLoginLabelText;
            else
                LoginLabel.Text = FrameworkConfiguration.Current.WebApplication.Login.LoginLabelText;
        }

        private void RedirectToLoginPage()
        {
            Response.Redirect(WebApplication.LoginProvider.GetLoginUrl(false));
        }

        private void ShowErrorMessage(string message)
        {
            ErrorDiv.InnerHtml = message;
            ErrorDiv.Visible = true;
        }

        private void ValidateResetPasswordRequest()
        {
            if (this.ResetPasswordRequestId != Guid.Empty)
            {
                WebApplication.LoginProvider.DeleteExpiredResetPasswordRequests();

                CommonDataSet.ResetPasswordRequestDataTable table = LoginProvider.GetResetPasswordRequest(this.ResetPasswordRequestId);
                if (table.Count == 1)
                {
                    CommonDataSet.ResetPasswordRequestRow row = table[0];
                    this.LoginId = row.LoginId;
                    LoginTextBox.Text = WebApplication.LoginProvider.GetLoginName(row.LoginId);

                    return;
                }
            }

            this.RedirectToLoginPage();
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Occurs when the page is being loaded.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An EventArgs that contains no event data.</param>
        protected void Page_Load(object sender, EventArgs e)
        {
            Micajah.Common.Pages.MasterPage.CreatePageHeader(this.Page, false, true, false, false, true);
            AutoGeneratedButtonsField.InsertButtonSeparator(ButtonsSeparator);

            if (!this.IsPostBack)
            {
                Micajah.Common.Pages.MasterPage.SetPageTitle(this.Page, ActionProvider.FindAction(CustomUrlProvider.CreateApplicationAbsoluteUrl(Request.Url.PathAndQuery)));

                this.LoadResources();
                this.ValidateResetPasswordRequest();
            }

            if (FrameworkConfiguration.Current.WebApplication.MasterPage.Theme == Pages.MasterPageTheme.Modern)
            {
                this.Page.Header.Controls.Add(Support.CreateStyleSheetLink(ResourceProvider.GetResourceUrl(ResourceProvider.LogOnModernStyleSheet, true)));

                MagicForm.ApplyStyle(FormTable);

                PasswordCompareValidator.Attributes["controltovalidate2"] = ConfirmPasswordTextBox.ClientID;

                MainContainer.Style[HtmlTextWriterStyle.Height] = "320px";
                MainContainer.Style[HtmlTextWriterStyle.MarginTop] = "-160px";
            }
            else
                this.Page.Header.Controls.Add(Support.CreateStyleSheetLink(ResourceProvider.GetResourceUrl(ResourceProvider.LogOnStyleSheet, true)));
        }

        /// <summary>
        /// Occurs when the submit button is clicked.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An EventArgs that contains no event data.</param>
        protected void SubmitButton_Click(object sender, EventArgs e)
        {
            bool success = false;
            try
            {
                success = WebApplication.LoginProvider.ChangePassword(this.LoginId, PasswordTextBox.Text);
            }
            catch (ArgumentException ex)
            {
                this.ShowErrorMessage(ex.Message);
                return;
            }

            if (success)
            {
                TitleLabel.ForeColor = System.Drawing.Color.Empty;
                TitleLabel.Text = Resources.ResetPasswordControl_TitleLabel_SuccessText;
                DescriptionLabel.Text = Resources.ResetPasswordControl_DescriptionLabel_SuccessText;

                WebApplication.LoginProvider.CancelResetPasswordRequest(this.ResetPasswordRequestId);
            }
            else
            {
                TitleLabel.ForeColor = System.Drawing.Color.Red;
                TitleLabel.Text = Resources.ResetPasswordControl_TitleLabel_FailureText;
                DescriptionLabel.Text = Resources.ResetPasswordControl_DescriptionLabel_FailureText;
            }

            FormTable.Visible = false;
            LogOnPageButton2.Visible = true;
            MainContainer.Style[HtmlTextWriterStyle.Height] = "120px";
            MainContainer.Style[HtmlTextWriterStyle.MarginTop] = "-60px";
        }

        protected void LogOnPageButton_Click(object sender, EventArgs e)
        {
            string url = null;
            if (!string.IsNullOrEmpty(LoginTextBox.Text))
                url = WebApplication.LoginProvider.GetLoginUrl(LoginTextBox.Text, false);
            else
                url = WebApplication.LoginProvider.GetLoginUrl(false);
            Response.Redirect(url);
        }

        #endregion

        #region Overriden Methods

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);

            if (FrameworkConfiguration.Current.WebApplication.MasterPage.Theme == Pages.MasterPageTheme.Modern)
                ResourceProvider.RegisterValidatorScriptResource(this.Page);
        }

        /// <summary>
        /// Renders the control.
        /// </summary>
        /// <param name="writer">The HtmlTextWriter to render content to.</param>
        protected override void Render(HtmlTextWriter writer)
        {
            LogOnControl.RenderHeader(writer);
            base.Render(writer);
        }

        #endregion
    }
}
