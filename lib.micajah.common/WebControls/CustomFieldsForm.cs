using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using Micajah.Common.Application;
using Micajah.Common.Bll;
using Micajah.Common.Configuration;
using Micajah.Common.Pages;
using Micajah.Common.Properties;
using Micajah.Common.Security;

namespace Micajah.Common.WebControls
{
    [ParseChildren(true)]
    [PersistChildren(false)]
    public class CustomFieldsForm : Control, INamingContainer
    {
        #region Members

        private Table m_FormTable;
        private MagicForm m_MagicForm;
        private Entity m_Entity;

        private List<CustomField> m_CustomFields;
        private bool? m_IsInMagicForm;
        private bool? m_IsEmpty;

        #endregion

        #region Private Properties

        private LinkButton CancelLink
        {
            get
            {
                LinkButton cancelLink = new LinkButton();
                cancelLink.ID = "CancelLink";
                cancelLink.CommandName = "Cancel";
                cancelLink.CssClass = "Cancel";
                cancelLink.CausesValidation = false;
                cancelLink.Text = Resources.AutoGeneratedButtonsField_CancelButton_Text;
                cancelLink.Click += new EventHandler(CancelLink_Click);
                return cancelLink;
            }
        }

        private LinkButton CloseButton
        {
            get
            {
                string commandName = CommandActions.Update.ToString() + "," + CommandActions.Close.ToString();
                LinkButton closeButton = new LinkButton();
                closeButton.ID = commandName.Replace(",", string.Empty) + "Button";
                closeButton.CommandName = commandName;
                closeButton.Text = Resources.AutoGeneratedButtonsField_UpdateButton_Text + Resources.AutoGeneratedButtonsField_CloseButtonSeparator + Resources.AutoGeneratedButtonsField_CloseButton_Text;
                closeButton.Click += new EventHandler(UpdateButton_Click);
                return closeButton;
            }
        }

        private List<CustomField> CustomFields
        {
            get
            {
                if (m_CustomFields == null) m_CustomFields = new List<CustomField>();
                return m_CustomFields;
            }
        }

        private bool IsInMagicForm
        {
            get
            {
                if (!m_IsInMagicForm.HasValue)
                    m_IsInMagicForm = (this.MagicForm != null);
                return m_IsInMagicForm.Value;
            }
        }

        private string KeyTag
        {
            get { return "<!--" + this.ClientID + "-->"; }
        }

        private MagicForm MagicForm
        {
            get
            {
                if (m_MagicForm == null)
                {
                    Control parent = this;
                    while ((m_MagicForm == null) && (parent != this.Page))
                    {
                        parent = parent.Parent;
                        if (parent != null)
                        {
                            if (parent.GetType() == typeof(MagicForm))
                                m_MagicForm = parent as MagicForm;
                        }
                    }
                }
                return m_MagicForm;
            }
        }

        private Button UpdateButton
        {
            get
            {
                string commandName = CommandActions.Update.ToString();
                StringBuilder sb = new StringBuilder(Resources.AutoGeneratedButtonsField_UpdateButton_Text);
                sb.AppendFormat(CultureInfo.InvariantCulture, " {0}", ((this.Entity == null) ? string.Empty : m_Entity.Name));
                if (this.ShowCloseButton)
                {
                    if (!this.ShowCloseButtonSeparate)
                    {
                        commandName += "," + CommandActions.Close.ToString();
                        sb.AppendFormat(CultureInfo.InvariantCulture, " & {0}", Resources.AutoGeneratedButtonsField_CloseButton_Text);
                    }
                }

                Button updateButton = new Button();
                updateButton.ID = commandName.Replace(",", string.Empty) + "Button";
                updateButton.CommandName = commandName;
                updateButton.Text = sb.ToString();
                updateButton.Click += new EventHandler(UpdateButton_Click);
                return updateButton;
            }
        }

        private MasterPageTheme Theme
        {
            get { return (this.IsInMagicForm ? this.MagicForm.Theme : FrameworkConfiguration.Current.WebApplication.MasterPage.Theme); }
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// Gets or sets the color scheme for the control.
        /// </summary>
        [DefaultValue(ColorScheme.White)]
        [Category("Appearance")]
        [Description("The color scheme for the control.")]
        public ColorScheme ColorScheme
        {
            get
            {
                object obj = null;
                if (this.IsInMagicForm)
                    obj = m_MagicForm.ColorScheme;
                if (obj == null)
                    obj = ViewState["ColorScheme"];
                return ((obj == null) ? ColorScheme.White : (ColorScheme)obj);
            }
            set { ViewState["ColorScheme"] = value; }
        }

        [DefaultValue(typeof(Guid), "00000000-0000-0000-0000-000000000000")]
        public Guid EntityId
        {
            get
            {
                object obj = this.ViewState["EntityId"];
                return ((obj == null) ? Guid.Empty : (Guid)obj);
            }
            set
            {
                if (value == Guid.Empty)
                    this.ViewState.Remove("EntityId");
                else
                    this.ViewState["EntityId"] = value;
                this.NeedRebind();
            }
        }

        [DefaultValue(typeof(Guid), "00000000-0000-0000-0000-000000000000")]
        public Guid OrganizationId
        {
            get
            {
                object obj = this.ViewState["OrganizationId"];
                if (obj == null)
                    obj = UserContext.SelectedOrganizationId;
                return ((obj == null) ? Guid.Empty : (Guid)obj);
            }
            set
            {
                this.ViewState["OrganizationId"] = value;
                this.NeedRebind();
            }
        }

        [DefaultValue(typeof(Guid?), "")]
        public Guid? InstanceId
        {
            get
            {
                object obj = this.ViewState["InstanceId"];
                return ((obj == null) ? null : (Guid?)obj);
            }
            set
            {
                this.ViewState["InstanceId"] = value;
                this.NeedRebind();
            }
        }

        /// <summary>
        /// Gets the value indicating whether the control doesn't contains the custom fields.
        /// </summary>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEmpty
        {
            get
            {
                if (!m_IsEmpty.HasValue)
                {
                    m_IsEmpty = true;
                    if (this.Entity != null)
                    {
                        m_Entity.LoadCustomFields(this.OrganizationId, this.InstanceId, this.LocalEntityId);
                        m_IsEmpty = (m_Entity.CustomFields.Count == 0);
                    }
                }
                return m_IsEmpty.Value;
            }
        }

        [DefaultValue("")]
        public string LocalEntityId
        {
            get
            {
                object obj = this.ViewState["LocalEntityId"];
                return ((obj == null) ? null : (string)obj);
            }
            set
            {
                this.ViewState["LocalEntityId"] = value;
                this.NeedRebind();
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public Entity Entity
        {
            get
            {
                if (m_Entity == null)
                    m_Entity = WebApplication.Entities[this.EntityId.ToString()];
                return m_Entity;
            }
            set
            {
                this.EntityId = ((value == null) ? Guid.Empty : value.Id);
                this.NeedRebind();
            }
        }

        /// <summary>
        /// Gets or sets the number of columns to display in the control.
        /// </summary>
        [Category("Layout")]
        [Description("The number of columns to display in the control.")]
        [DefaultValue(1)]
        public int RepeatColumns
        {
            get
            {
                object obj = null;
                if (this.IsInMagicForm)
                    obj = m_MagicForm.RepeatColumns;
                if (obj == null)
                    obj = ViewState["RepeatColumns"];
                return ((obj == null) ? 1 : (int)obj);
            }
            set
            {
                if (value < 1) value = 1;
                ViewState["RepeatColumns"] = value;
            }
        }

        /// <summary>
        /// Gets or sets the value indicating the close button is shown.
        /// </summary>
        [Category("Behavior")]
        [Description("Whether the close button is shown.")]
        [DefaultValue(true)]
        public bool ShowCloseButton
        {
            get
            {
                object obj = ViewState["ShowCloseButton"];
                return ((obj == null) ? true : (bool)obj);
            }
            set { ViewState["ShowCloseButton"] = value; }
        }

        /// <summary>
        /// Gets or sets the value indicating that the close button is rendered as separate button.
        /// </summary>
        [Category("Behavior")]
        [Description("Whether a close button is rendered as separate button.")]
        [DefaultValue(false)]
        public bool ShowCloseButtonSeparate
        {
            get
            {
                object obj = this.ViewState["ShowCloseButtonSeparate"];
                return ((obj == null) ? false : (bool)obj);
            }
            set { this.ViewState["ShowCloseButtonSeparate"] = value; }
        }

        /// <summary>
        /// Gets or sets the group of controls for which this control causes validation when it posts back to the server.
        /// </summary>
        [Category("Behavior")]
        [Description("The group of controls for which this control causes validation when it posts back to the server.")]
        [DefaultValue("")]
        public string ValidationGroup
        {
            get
            {
                object obj = null;
                if (this.IsInMagicForm)
                    obj = m_MagicForm.ValidationGroup;
                if (obj == null)
                    obj = ViewState["ValidationGroup"];
                return ((obj == null) ? string.Empty : (string)obj);
            }
            set { ViewState["ValidationGroup"] = value; }
        }

        /// <summary>
        /// Gets or sets the width of the control.
        /// </summary>
        [DefaultValue(typeof(Unit), "")]
        [Description("The width of the control.")]
        [Category("Layout")]
        public Unit Width
        {
            get
            {
                object obj = ViewState["Width"];
                return ((obj == null) ? Unit.Empty : (Unit)obj);
            }
            set { ViewState["Width"] = value; }
        }

        #endregion

        #region Events

        public event EventHandler<MagicFormActionEventArgs> Action;

        #endregion

        #region Private Methods

        private void CreateFormTable()
        {
            m_FormTable = new Table();
            m_FormTable.ID = "FormTable";

            if (this.IsInMagicForm)
            {
                m_FormTable.Width = Unit.Percentage(100);
                m_MagicForm.ItemInserted += new DetailsViewInsertedEventHandler(MagicForm_ItemInserted);
                m_MagicForm.ItemUpdated += new DetailsViewUpdatedEventHandler(MagicForm_ItemUpdated);
                m_MagicForm.ItemCommand += new DetailsViewCommandEventHandler(MagicForm_ItemCommand);
                if (this.RepeatColumns == 1) m_MagicForm.PostRender += new EventHandler<PostRenderEventArgs>(MagicForm_PostRender);
            }
            else
            {
                m_FormTable.Width = this.Width;

                TableHeaderRow tr = new TableHeaderRow();
                tr.TableSection = TableRowSection.TableHeader;
                TableHeaderCell th = new TableHeaderCell();
                th.Text = MagicForm.GetCaption(DetailsViewMode.Edit, m_Entity.Name);
                th.ColumnSpan = this.RepeatColumns * 2;
                tr.Cells.Add(th);

                m_FormTable.Rows.Add(tr);
            }

            this.Controls.Add(m_FormTable);
        }

        private TableFooterRow GetFooterRow(bool showRequiredTable)
        {
            TableFooterRow footerRow = new TableFooterRow();

            TableCell cell = new TableCell();
            cell.ColumnSpan = this.RepeatColumns * 2;

            Control container = ((showRequiredTable && (this.Theme != MasterPageTheme.Modern)) ? MagicForm.AddRequiredTable(cell) : cell);

            container.Controls.Add(this.UpdateButton);
            AutoGeneratedButtonsField.InsertButtonSeparator(container);
            if (this.ShowCloseButtonSeparate)
            {
                container.Controls.Add(this.CloseButton);
                AutoGeneratedButtonsField.InsertButtonSeparator(container);
            }
            container.Controls.Add(this.CancelLink);

            footerRow.Cells.Add(cell);

            return footerRow;
        }

        private void NeedRebind()
        {
            m_IsEmpty = null;
            m_Entity = null;
            base.ChildControlsCreated = false;
        }

        private void CancelLink_Click(object sender, EventArgs e)
        {
            this.RejectChanges();
            if (this.Action != null) this.Action(this, new MagicFormActionEventArgs(CommandActions.Cancel));
        }

        private void MagicForm_ItemUpdated(object sender, DetailsViewUpdatedEventArgs e)
        {
            if (e.Exception == null)
                this.AcceptChanges();
        }

        private void MagicForm_ItemInserted(object sender, DetailsViewInsertedEventArgs e)
        {
            if (e.Exception == null)
                this.AcceptChanges();
        }

        private void MagicForm_ItemCommand(object sender, DetailsViewCommandEventArgs e)
        {
            if (e.CommandName.EndsWith("Cancel", StringComparison.OrdinalIgnoreCase))
                this.RejectChanges();
        }

        private void MagicForm_PostRender(object sender, PostRenderEventArgs e)
        {
            if (e.Content.StartsWith(this.KeyTag, StringComparison.Ordinal))
                e.Content = e.Content.Substring(this.KeyTag.Length);
            else
            {
                int startIndex = e.Content.Split(new string[] { this.ClientID }, StringSplitOptions.None)[0].LastIndexOf("<tr", StringComparison.Ordinal);
                if (startIndex > -1)
                {
                    int endIndex = e.Content.IndexOf("<tr", startIndex + 3, StringComparison.Ordinal);
                    if (endIndex > -1)
                    {
                        e.Content = e.Content.Remove(startIndex, endIndex - startIndex);

                        startIndex = e.Content.Split(new string[] { this.KeyTag }, StringSplitOptions.None)[0].LastIndexOf("</tr>", StringComparison.Ordinal);
                        if (startIndex > -1)
                        {
                            endIndex = e.Content.IndexOf(this.KeyTag, StringComparison.Ordinal);
                            if (endIndex > -1)
                            {
                                e.Content = e.Content.Remove(startIndex, endIndex - startIndex + this.KeyTag.Length);
                                if (this.Page.IsPostBack)
                                    e.Content = e.Content.Insert(0, this.KeyTag);
                            }
                        }
                    }
                }
            }
        }

        private void UpdateButton_Click(object sender, EventArgs e)
        {
            this.AcceptChanges();

            IButtonControl btn = sender as IButtonControl;
            CommandActions commandAction = 0;
            string[] args = btn.CommandName.Split(',');
            for (int i = 0; i < args.Length; i++)
            {
                commandAction = (commandAction | (CommandActions)Enum.Parse(typeof(CommandActions), args[i]));
            }

            if (this.Action != null) this.Action(this, new MagicFormActionEventArgs(commandAction));
        }

        #endregion

        #region Overriden Methods

        protected override void CreateChildControls()
        {
            base.CreateChildControls();

            if (this.IsEmpty) return;

            this.CreateFormTable();

            int columnIndex = 0;
            int columnsCount = this.RepeatColumns - 1;
            int rowIndex = 0;
            bool showRequiredTable = false;
            TableRow row = null;
            MasterPageTheme theme = this.Theme;

            foreach (EntityField field in m_Entity.CustomFields)
            {
                if (row == null) row = new TableRow();
                TableCell cell = new TableCell();
                Label lbl = new Label();
                lbl.Text = field.Name;
                if (columnIndex > 0) cell.CssClass = "Mf_HcPl";
                cell.Controls.Add(lbl);
                row.Cells.Add(cell);

                CustomField customField = new CustomField();
                customField.Theme = theme;
                customField.Entity = this.Entity;
                customField.EntityField = field;
                customField.OrganizationId = this.OrganizationId;
                customField.InstanceId = this.InstanceId;
                customField.LocalEntityId = this.LocalEntityId;
                customField.ValidationGroup = this.ValidationGroup;
                customField.ID = "CustomField" + rowIndex.ToString(CultureInfo.InvariantCulture);
                this.CustomFields.Add(customField);
                cell = new TableCell();
                cell.Controls.Add(customField);
                row.Cells.Add(cell);

                if (columnIndex == columnsCount)
                {
                    m_FormTable.Rows.Add(row);
                    columnIndex = 0;
                    row = null;
                }
                else
                    columnIndex++;

                rowIndex++;
                if (!field.AllowDBNull) showRequiredTable = true;
            }

            if (!this.IsInMagicForm)
                m_FormTable.Rows.Add(this.GetFooterRow(showRequiredTable));

            MagicForm.ApplyStyle(m_FormTable, this.ColorScheme, this.IsInMagicForm, false);
        }

        protected override void Render(HtmlTextWriter writer)
        {
            if (writer == null) return;

            if (this.DesignMode)
                writer.Write(this.ID);
            else
            {
                base.Render(writer);
                if (this.IsInMagicForm) writer.Write(this.KeyTag);
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Commits all the changes since the last time AcceptChanges was called.
        /// </summary>
        /// <returns>true, if the changes are commited successfully; otherwise, false.</returns>
        public bool AcceptChanges()
        {
            if (this.Entity == null) return false;

            foreach (CustomField сustomField in this.CustomFields)
            {
                сustomField.ExtractControlValue();
            }

            this.Entity.SaveCustomFields(this.OrganizationId, this.LocalEntityId);

            return true;
        }

        /// <summary>
        /// Rolls back all changes that have been made to the control since it was loaded, or the last time AcceptChanges was called.
        /// </summary>
        /// <returns>true, if the changes are rolled back successfully; otherwise, false.</returns>
        public bool RejectChanges()
        {
            if (this.Entity == null) return false;

            foreach (CustomField сustomField in this.CustomFields)
            {
                сustomField.RejectChanges();
            }

            return true;
        }

        #endregion
    }
}
